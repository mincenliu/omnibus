[{"path":"/articles/part1c.html","id":"question","dir":"Articles","previous_headings":"","what":"Question","title":"Example analysis","text":"data analysis aims explore college tuition pay graduation relationship.","code":""},{"path":"/articles/part1c.html","id":"original-data","dir":"Articles","previous_headings":"","what":"Original Data","title":"Example analysis","text":"data originally came US Department Education. found data TidyTuesday link GitHub repository https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-03-10. use 2 datasets repository: tuition_cost.csv contains -state -state tuition school salary_potential.csv contains early mid career pay USD students school.","code":""},{"path":"/articles/part1c.html","id":"data-dictionary","dir":"Articles","previous_headings":"","what":"Data Dictionary","title":"Example analysis","text":"Data dictionaries available : https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-03-10#tuition_costcsv, https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-03-10#salary_potentialcsv.","code":""},{"path":"/articles/part1c.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load Data","title":"Example analysis","text":"","code":"# tests if a directory named \"data\" exists locally if(!dir.exists(here(\"data\"))) { dir.create(here(\"data\")) }  if(!file.exists(here(\"data\", \"tuition_cost.RData\")) | !file.exists(here(\"data\", \"salary_potential.RData\"))){   tuition_cost <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/tuition_cost.csv')   salary_potential <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/salary_potential.csv')      # save the files to RData objects   save(tuition_cost, file = here(\"data\", \"tuition_cost.RData\"))   save(salary_potential, file = here(\"data\", \"salary_potential.RData\")) } tuition_cost <- get(load(here(\"data\", \"tuition_cost.RData\"))) salary_potential <- get(load(here(\"data\", \"salary_potential.RData\"))) glimpse(tuition_cost) #> Rows: 2,973 #> Columns: 10 #> $ name                 <chr> \"Aaniiih Nakoda College\", \"Abilene Christian Univ… #> $ state                <chr> \"Montana\", \"Texas\", \"Georgia\", \"Minnesota\", \"Cali… #> $ state_code           <chr> \"MT\", \"TX\", \"GA\", \"MN\", \"CA\", \"CO\", \"NY\", \"NY\", \"… #> $ type                 <chr> \"Public\", \"Private\", \"Public\", \"For Profit\", \"For… #> $ degree_length        <chr> \"2 Year\", \"4 Year\", \"2 Year\", \"2 Year\", \"4 Year\",… #> $ room_and_board       <dbl> NA, 10350, 8474, NA, 16648, 8782, 16030, 11660, 1… #> $ in_state_tuition     <dbl> 2380, 34850, 4128, 17661, 27810, 9440, 38660, 537… #> $ in_state_total       <dbl> 2380, 45200, 12602, 17661, 44458, 18222, 54690, 1… #> $ out_of_state_tuition <dbl> 2380, 34850, 12550, 17661, 27810, 20456, 38660, 9… #> $ out_of_state_total   <dbl> 2380, 45200, 21024, 17661, 44458, 29238, 54690, 2… glimpse(salary_potential) #> Rows: 935 #> Columns: 7 #> $ rank                      <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… #> $ name                      <chr> \"Auburn University\", \"University of Alabama … #> $ state_name                <chr> \"Alabama\", \"Alabama\", \"Alabama\", \"Alabama\", … #> $ early_career_pay          <dbl> 54400, 57500, 52300, 54500, 48400, 46600, 49… #> $ mid_career_pay            <dbl> 104500, 103900, 97400, 93500, 90500, 89100, … #> $ make_world_better_percent <dbl> 51, 59, 50, 61, 52, 53, 48, 57, 56, 58, 60, … #> $ stem_percent              <dbl> 31, 45, 15, 30, 3, 12, 27, 17, 17, 20, 8, 7,…"},{"path":"/articles/part1c.html","id":"data-wrangling","dir":"Articles","previous_headings":"","what":"Data Wrangling","title":"Example analysis","text":"Luckily, don’t missing values. , see possible difference 2 columns caused dash values “state_name”. ’re going check . remove 4 observations inconsistent information. keep 4-year schools. want find modal value(s) percent student body STEM: can see modes 0 7.","code":"# We first combine the 2 data frames. We include only schools that are in both data frames. combined <- inner_join(tuition_cost, salary_potential, by = \"name\") # Remove unwanted variables combined <- combined %>% select(-room_and_board, -in_state_total, -out_of_state_total, -rank, -make_world_better_percent)  # Check if there's any NAs. If missing values exist, get the corresponding row numbers. naRows(combined) #> integer(0) # We want to check whether there's any discrepancy between the \"state\" variables from the 2 data frames. temp <- map2(.x = combined$state, .y = combined$state_name, .f = ~str_equal(.x, .y))  # Save the index of not matched cases ind <- which(temp == FALSE)  combined %>% slice(ind) %>% select(state, state_name) #> # A tibble: 135 × 2 #>    state          state_name     #>    <chr>          <chr>          #>  1 New York       New-York       #>  2 North Carolina North-Carolina #>  3 South Dakota   South-Dakota   #>  4 New York       New-York       #>  5 North Carolina North-Carolina #>  6 North Carolina North-Carolina #>  7 South Carolina South-Carolina #>  8 South Dakota   South-Dakota   #>  9 New Jersey     New-Jersey     #> 10 West Virginia  West-Virginia  #> # … with 125 more rows # Replace \"-\" with \" \" combined$state_name <- str_replace(combined$state_name, \"-\", \" \") temp2 <- pmap(list(x = combined$state, y = combined$state_name),               .f = ~str_equal(..1, ..2)) ind2 <- which(temp2 == FALSE) combined %>% slice(ind2) %>% select(name, state, state_code, state_name) #> # A tibble: 4 × 4 #>   name                 state      state_code state_name #>   <chr>                <chr>      <chr>      <chr>      #> 1 Northwestern College Illinois   IL         Iowa       #> 2 St. John's College   Illinois   IL         Maryland   #> 3 St. John's College   New Mexico NM         Maryland   #> 4 Sterling College     Vermont    VT         Kansas combined <- combined %>% slice(-ind2) %>% select(-state_name) combined #> # A tibble: 724 × 10 #>    name      state state…¹ type  degre…² in_st…³ out_o…⁴ early…⁵ mid_c…⁶ stem_…⁷ #>    <chr>     <chr> <chr>   <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 Adams St… Colo… CO      Publ… 4 Year     9440   20456   44400   81400       3 #>  2 Adventis… Flor… FL      Priv… 4 Year    15150   15150   51600   89800       5 #>  3 Agnes Sc… Geor… GA      Priv… 4 Year    41160   41160   46000   83600      26 #>  4 Alabama … Alab… AL      Publ… 4 Year    11068   19396   39800   71500      16 #>  5 Alaska P… Alas… AK      Priv… 4 Year    20830   20830   50300   90000       6 #>  6 Albany C… New … NY      Priv… 4 Year    35105   35105   81000  144800       2 #>  7 Albertus… Conn… CT      Priv… 4 Year    32060   32060   49700   85900       2 #>  8 Albion C… Mich… MI      Priv… 4 Year    45775   45775   52100   99300      23 #>  9 Alcorn S… Miss… MS      Publ… 4 Year     7144    7144   40900   69500      19 #> 10 Allen Co… Iowa  IA      Priv… 4 Year    19970   19970   51600   91300       0 #> # … with 714 more rows, and abbreviated variable names ¹​state_code, #> #   ²​degree_length, ³​in_state_tuition, ⁴​out_of_state_tuition, #> #   ⁵​early_career_pay, ⁶​mid_career_pay, ⁷​stem_percent combined %>% count(degree_length) #> # A tibble: 2 × 2 #>   degree_length     n #>   <chr>         <int> #> 1 2 Year            3 #> 2 4 Year          721 combined <- combined %>% filter(degree_length == \"4 Year\") combined #> # A tibble: 721 × 10 #>    name      state state…¹ type  degre…² in_st…³ out_o…⁴ early…⁵ mid_c…⁶ stem_…⁷ #>    <chr>     <chr> <chr>   <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 Adams St… Colo… CO      Publ… 4 Year     9440   20456   44400   81400       3 #>  2 Adventis… Flor… FL      Priv… 4 Year    15150   15150   51600   89800       5 #>  3 Agnes Sc… Geor… GA      Priv… 4 Year    41160   41160   46000   83600      26 #>  4 Alabama … Alab… AL      Publ… 4 Year    11068   19396   39800   71500      16 #>  5 Alaska P… Alas… AK      Priv… 4 Year    20830   20830   50300   90000       6 #>  6 Albany C… New … NY      Priv… 4 Year    35105   35105   81000  144800       2 #>  7 Albertus… Conn… CT      Priv… 4 Year    32060   32060   49700   85900       2 #>  8 Albion C… Mich… MI      Priv… 4 Year    45775   45775   52100   99300      23 #>  9 Alcorn S… Miss… MS      Publ… 4 Year     7144    7144   40900   69500      19 #> 10 Allen Co… Iowa  IA      Priv… 4 Year    19970   19970   51600   91300       0 #> # … with 711 more rows, and abbreviated variable names ¹​state_code, #> #   ²​degree_length, ³​in_state_tuition, ⁴​out_of_state_tuition, #> #   ⁵​early_career_pay, ⁶​mid_career_pay, ⁷​stem_percent mmode(combined$stem_percent) #> [1] 0 7"},{"path":"/articles/part1c.html","id":"data-visualization","dir":"Articles","previous_headings":"","what":"Data Visualization","title":"Example analysis","text":"Plot 1  Plot 2  Plot 3","code":"combined %>% ggplot(aes(x = type, y = out_of_state_tuition)) +     geom_boxplot() +      labs(title = \"Out-of-state Tuition by School Type\",           subtitle = \"This is a box plot displaying the summary statistics for the out-of-state tuition by school type.\\nWe can see that the first quartile of private school tuition is above the third quartile of the\\npublic school tuition.\",           caption = \"Mincen Liu\") +     xlab(\"school type\") + ylab(\"out-of-state tuition in USD\") combined %>% ggplot(aes(x = out_of_state_tuition, y = mid_career_pay)) +      geom_point() +      facet_grid(type ~ .) +      labs(title = \"Mid Career Pay vs. Out-of-state Tuition by School Type\",           subtitle = \"This is a scatter plot showing the relationship between the mid career pay and the out-of-state\\ntuition, faceted by school type. We see an overall positive relation in each school type.\",           caption = \"Mincen Liu\") +     xlab(\"out-of-state tuition in USD\") + ylab(\"mid career pay in USD\") combined %>% ggplot(aes(early_career_pay)) +     geom_density() +     labs(title = \"Early Career Pay\",           subtitle = \"This is a density plot of the early career pay. We see a right-skewed distribution.\",           caption = \"Mincen Liu\") +     xlab(\"early career pay in USD\") + ylab(\"density\")"},{"path":"/articles/part1c.html","id":"interpretation","dir":"Articles","previous_headings":"","what":"Interpretation","title":"Example analysis","text":"average, private school --state tuition much higher public school --state tuition among 4-year institutions. see overall positive relation mid career pay --state tuition school type. early career pay right-skewed distribution.","code":""},{"path":"/articles/part1c.html","id":"list-of-functions-used","dir":"Articles","previous_headings":"","what":"List of Functions Used","title":"Example analysis","text":"dplyr: glimpse(), inner_join(), select(), slice(), count(), filter() stringr: str_equal(), str_replace() purrr: map2(), pmap() ggplot2: geom_boxplot(), geom_point(), geom_density() omnibus: naRows(), mmode()","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adam B. Smith. Maintainer, author. Mincen Liu. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith , Liu M (2022). omnibus: Helper Tools Managing Data, Dates, Missing Values, Text. R package version 1.1.3, https://github.com/adamlilith/omnibus.","code":"@Manual{,   title = {omnibus: Helper Tools for Managing Data, Dates, Missing Values, and Text},   author = {Adam B. Smith and Mincen Liu},   year = {2022},   note = {R package version 1.1.3},   url = {https://github.com/adamlilith/omnibus}, }"},{"path":[]},{"path":"/index.html","id":"information","dir":"","previous_headings":"","what":"Information","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"original R package came : https://github.com/adamlilith/omnibus. URL deployed website: <>. changed overall appearance website theme Bootswatch. changed background color black text color blue gray. changed highlighting code blocks “theme: ayu-mirage”. changed background inline code light orange. changed font headings. changed font majority text.","code":""},{"path":"/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"R Utility Functions 99%  assortment helper functions managing data (e.g., rotating values matrices user-defined angle, switching row- column-indexing), dates (e.g., intuiting year messy date strings), handling missing values (e.g., removing elements/rows across multiple vectors matrices NA), text (e.g., flushing reports console real-time).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"version 1.1.2, omnibus CRAN! can install latest CRAN-stable version normal way install packages CRAN, development version using: may need install remotes package first.","code":"remotes::install_github('adamlilith/omnibus', dependencies=TRUE)"},{"path":"/index.html","id":"data-manipulation","dir":"","previous_headings":"","what":"Data manipulation","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"bracket: Find values bracket given number. combineDf: Combine data frames different schema. corner: Corner matrix data frame. cull: Force vectors matrices/data frames length number rows. insert: Insert values vector. insertCol insertRow: Insert column(s)/row(s) matrix data frame. mergeLists: Merge lists. ‘renumSeq’: Renumber sequence. maxRuns: Maximum number continuous “runs” values meeting particular condition. mirror: Flip object left-right (-). mmode: Modal value(s). rotateMatrix: Rotate matrix. roundTo: Rounds value nearest target value. rowColIndexing: Convert row column indexing matrix. stretchMinMax: Rescale values given range.","code":""},{"path":"/index.html","id":"dates","dir":"","previous_headings":"","what":"Dates","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"domLeap: Data frame days month leap year. domNonLeap: Data frame days month non-leap year. doyLeap: Data frame days year leap year. doyNonLeap: Data frame days year non-leap year. isLeapYear: year leap year? yearFromDate: Attempt find year across dates non-standard formats.","code":""},{"path":"/index.html","id":"geometry","dir":"","previous_headings":"","what":"Geometry","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"pairDist: Pairwise Euclidean distance two sets points. quadArea: Area quadrilateral.","code":""},{"path":"/index.html","id":"handling-nas","dir":"","previous_headings":"","what":"Handling NAs","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"%<na%, %<=na%, %==na%, %!=na%, %>na%, %>=na%: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). isTRUENA isFALSENA: Logical operators robust NA. naCompare: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). naOmitMulti: Remove elements multiple vectors least one element NA rows matrices/data frames least one row NA. naRows: Indices rows least one NA.","code":""},{"path":"/index.html","id":"data-properties","dir":"","previous_headings":"","what":"Data properties","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"countDecDigits: Count number digits decimal. longRun: Longest run given sequence vector. roundedSigDigits: Infers number significant digits represented decimal representation division operation digits place integer rounded. .pmax .pmin: Combine .max pmax .min pmin (vectorized .max .min).","code":""},{"path":"/index.html","id":"system","dir":"","previous_headings":"","what":"System","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"dirCreate: Nicer version dir.create(). eps: Smallest floating point value computer can think . listFiles: Nicer version list.files(). memUse: Display largest objects memory.","code":""},{"path":"/index.html","id":"text","dir":"","previous_headings":"","what":"Text","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"capIt: Capitalize first letter string. prefix: Add repeating character string ensure user-defined length (e.g., 7 –> 007). say: Replacement print('abc'); flush.console().","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"basic example isLeapYear() function:","code":"isLeapYear(2022)"},{"path":"/reference/bracket.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify values bracketing another value — bracket","title":"Identify values bracketing another value — bracket","text":"function takes ordered vector numeric character values finds pair bracket third value, x. x exactly equal one values vector, single value equal x returned. x falls outside range vector, least/extreme value vector returned (depending side distribution vector x resides). Optionally, users can function return index values bracket x.","code":""},{"path":"/reference/bracket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify values bracketing another value — bracket","text":"","code":"bracket(x, by, index = FALSE, inner = TRUE, warn = FALSE)"},{"path":"/reference/bracket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify values bracketing another value — bracket","text":"x One numeric character values. vector numeric character values. sorted (high low low high... , error result). index Logical. FALSE (default), numeric values returned. TRUE, index indices bracketing value(s) returned. inner Logical. TRUE (default), x surrounded least one series repeating values, return values (indices) among repeated sequence(s) closest value x. FALSE, return value(s) (indices) among repeated sequence(s) farthest value x. example, index = TRUE, = c(1, 2, 2, 2, 3, 3), x = 2.5, setting inner = TRUE return index third 2 first 3.  inner = FALSE, function returns index first 2 second 3. warn Logical. TRUE, warn x outside range .","code":""},{"path":"/reference/bracket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify values bracketing another value — bracket","text":"x single value, function return numeric vector length 1 2, depending many values bracket x. values , median index (value) returned. x vector, result list one element per item x element format case x single value.","code":""},{"path":"/reference/bracket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify values bracketing another value — bracket","text":"","code":"by <- 2 * (1:5) bracket(4.2, by) #> [1] 4 6 bracket(6.8, by) #> [1] 6 8  bracket(3.2, by, index=TRUE) #> [1] 1 2 bracket(c(3.2, 9.8, 4), by) #> [[1]] #> [1] 2 4 #>  #> [[2]] #> [1]  8 10 #>  #> [[3]] #> [1] 4 #>   bracket(2, c(0, 1, 1, 1, 3, 5), index=TRUE) #> [1] 4 5 bracket(3, c(1, 2, 10)) #> [1]  2 10  bracket(2.5, c(1, 2, 2, 2, 3, 3), index=TRUE) #> [1] 4 5 bracket(2.5, c(1, 2, 2, 2, 3, 3), index=TRUE, inner=FALSE) #> [1] 2 6 bracket(2.9, c(1, 2, 2, 2, 3, 3), index=TRUE) #> [1] 4 5 bracket(2.9, c(1, 2, 2, 2, 3, 3), index=TRUE, inner=FALSE) #> [1] 2 6  # \\donttest{ by <- 1:10 bracket(-100, by) #> [1] 1 bracket(100, by) #> [1] 10 # }"},{"path":"/reference/capIt.html","id":null,"dir":"Reference","previous_headings":"","what":"Capitalize first letter of a string — capIt","title":"Capitalize first letter of a string — capIt","text":"function capitalizes first letter string first letters list strings.","code":""},{"path":"/reference/capIt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capitalize first letter of a string — capIt","text":"","code":"capIt(x)"},{"path":"/reference/capIt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capitalize first letter of a string — capIt","text":"x Character character list.","code":""},{"path":"/reference/capIt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capitalize first letter of a string — capIt","text":"Character character list.","code":""},{"path":[]},{"path":"/reference/capIt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capitalize first letter of a string — capIt","text":"","code":"x <- c('shots', 'were', 'exchanged at the ', 'hospital.') capIt(x) #>              shots               were  exchanged at the           hospital.  #>            \"Shots\"             \"Were\" \"Exchanged At The\"        \"Hospital.\""},{"path":"/reference/combineDf.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine data frames with different fields using a crosswalk table — combineDf","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"function combines multiple data frames, possibly different column names, single data frame.  Usually merge faster easier implement columns merged names, rbind always faster much easier column names match exactly.","code":""},{"path":"/reference/combineDf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"","code":"combineDf(   ...,   crosswalk,   sep = \"; \",   use = NULL,   classes = NULL,   verbose = FALSE )"},{"path":"/reference/combineDf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"... list data frames. ignored, paths file names data frames can specified crosswalk. crosswalk Data frame. Column names fields desired output data frame. row corresponds different data frame join. ... used first column must paths file names CSV, RDS, RData files representing data frames join. column, elements cell contain name column data frame coincides column name crosswalk table.  example, final output column name \"species\" \"data frame #1\" column named \"Species\" \"data frame #2\" column named \"scientificName\", first value crosswalk \"species\" column \"Species\" second \"scientificName\". complex joining can done using following cells crosswalk: _ start value: indicates value crosswalk table read text repeated output row (minus initial \"_\"). example, \"_inspected\" repeat string \"inspected\" every row output corresponding respective data frame. 'c(~~~)': paste together fields source data frame named ... using string specified sep (\"~~~\" represents column names respective data frame). Note entire string must inside single double quotes 'c()' \"c()\" columns named inside c() must delineated kind quote (single c() delineated double, vice versa). NA: Repeats NA. sep Character, specifies string put fields combined c(~~~~) format crosswalk. use Logical, Character, NULL, ... used list logical elements (TRUE FALSE), column name crosswalk logical values indicating whether particular data frame collated, NULL, case data frames used (default). classes Character character list, specifies classes (e.g., numeric, character) assigned column output table. NULL, classes assumed character.  just one value listed, columns set class. list, must length number columns crosswalk specify class column. verbose Logical, TRUE prints extra information execution.  Useful debugging crosswalk table.","code":""},{"path":"/reference/combineDf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"data frame.","code":""},{"path":[]},{"path":"/reference/combineDf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"","code":"df1 <- data.frame(x1=1:5, x2='valid', x3=letters[1:5], x4=LETTERS[1:5], x5='stuff') df2 <- data.frame(y1=11:15, y3=rev(letters)[1:5])  crosswalk <- data.frame(   a=c('x1', 'y1'),   b=c('x2', '_valid'),   c=c('c(\"x3\", \"x4\")', 'y3'),   d=c('x5', NA) )  out <- combineDf(df1, df2, crosswalk=crosswalk) out #>     a     b    c     d #> 1   1 valid a; A stuff #> 2   2 valid b; B stuff #> 3   3 valid c; C stuff #> 4   4 valid d; D stuff #> 5   5 valid e; E stuff #> 6  11 valid    z  <NA> #> 7  12 valid    y  <NA> #> 8  13 valid    x  <NA> #> 9  14 valid    w  <NA> #> 10 15 valid    v  <NA>"},{"path":"/reference/corner.html","id":null,"dir":"Reference","previous_headings":"","what":"Corner of a matrix or data frame — corner","title":"Corner of a matrix or data frame — corner","text":"function returns corner matrix data frame (.e., upper left, upper right, lower left, lower right).","code":""},{"path":"/reference/corner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Corner of a matrix or data frame — corner","text":"","code":"corner(x, corner = 1, size = 5)"},{"path":"/reference/corner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Corner of a matrix or data frame — corner","text":"x Data frame, matrix, vector number rows elements . corner Integer set 1, 2, 3, 4 character set 'topleft', 'topright', 'bottomleft', 'bottomright' set 'tl', 'tr', 'bl', 'br'. Indicates corner return. Integers 1, 2, 3 4 correspond top left, top right, bottom left, bottom right corners. default 1, top left corner. size Positive integer, number rows columns return. fewer columns/rows indicated columns/rows returned.","code":""},{"path":"/reference/corner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Corner of a matrix or data frame — corner","text":"matrix data frame.","code":""},{"path":[]},{"path":"/reference/corner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Corner of a matrix or data frame — corner","text":"","code":"x <- matrix(1:120, ncol=12, nrow=10) x #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #>  [1,]    1   11   21   31   41   51   61   71   81    91   101   111 #>  [2,]    2   12   22   32   42   52   62   72   82    92   102   112 #>  [3,]    3   13   23   33   43   53   63   73   83    93   103   113 #>  [4,]    4   14   24   34   44   54   64   74   84    94   104   114 #>  [5,]    5   15   25   35   45   55   65   75   85    95   105   115 #>  [6,]    6   16   26   36   46   56   66   76   86    96   106   116 #>  [7,]    7   17   27   37   47   57   67   77   87    97   107   117 #>  [8,]    8   18   28   38   48   58   68   78   88    98   108   118 #>  [9,]    9   19   29   39   49   59   69   79   89    99   109   119 #> [10,]   10   20   30   40   50   60   70   80   90   100   110   120 corner(x, 1) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1   11   21   31   41 #> [2,]    2   12   22   32   42 #> [3,]    3   13   23   33   43 #> [4,]    4   14   24   34   44 #> [5,]    5   15   25   35   45 corner(x, 2) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   71   81   91  101  111 #> [2,]   72   82   92  102  112 #> [3,]   73   83   93  103  113 #> [4,]   74   84   94  104  114 #> [5,]   75   85   95  105  115 corner(x, 3) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    6   16   26   36   46 #> [2,]    7   17   27   37   47 #> [3,]    8   18   28   38   48 #> [4,]    9   19   29   39   49 #> [5,]   10   20   30   40   50 corner(x, 4) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   76   86   96  106  116 #> [2,]   77   87   97  107  117 #> [3,]   78   88   98  108  118 #> [4,]   79   89   99  109  119 #> [5,]   80   90  100  110  120"},{"path":"/reference/countDecDigits.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate number of digits after a decimal place — countDecDigits","title":"Calculate number of digits after a decimal place — countDecDigits","text":"function calculates number digits decimal place. Note trailing zeros likely ignored.","code":""},{"path":"/reference/countDecDigits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate number of digits after a decimal place — countDecDigits","text":"","code":"countDecDigits(x)"},{"path":"/reference/countDecDigits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate number of digits after a decimal place — countDecDigits","text":"x Numeric numeric list.","code":""},{"path":"/reference/countDecDigits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate number of digits after a decimal place — countDecDigits","text":"Integer.","code":""},{"path":"/reference/countDecDigits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate number of digits after a decimal place — countDecDigits","text":"","code":"countDecDigits(c(1, 1.1, 1.12, 1.123, 1.1234, -1, 0, 10.0000, 10.0010)) #> [1] 0 1 2 3 4 0 0 0 3"},{"path":"/reference/cull.html","id":null,"dir":"Reference","previous_headings":"","what":"Force objects to have length or rows equal to the shortest — cull","title":"Force objects to have length or rows equal to the shortest — cull","text":"function takes set vectors, data frames, matrices removes last values/rows length/number rows equal shortest among .","code":""},{"path":"/reference/cull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force objects to have length or rows equal to the shortest — cull","text":"","code":"cull(...)"},{"path":"/reference/cull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force objects to have length or rows equal to the shortest — cull","text":"... Vectors, matrices, data frames.","code":""},{"path":"/reference/cull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Force objects to have length or rows equal to the shortest — cull","text":"List objects one element per object supplied argument function.","code":""},{"path":"/reference/cull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Force objects to have length or rows equal to the shortest — cull","text":"","code":"a <- 1:10 b <- 1:20 c <- letters cull(a, b, c) #> $a #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $b #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $c #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" #>  x <- data.frame(x=1:10, y=letters[1:10]) y <- data.frame(x=1:26, y=letters) cull(x, y) #> $x #>     x y #> 1   1 a #> 2   2 b #> 3   3 c #> 4   4 d #> 5   5 e #> 6   6 f #> 7   7 g #> 8   8 h #> 9   9 i #> 10 10 j #>  #> $y #>     x y #> 1   1 a #> 2   2 b #> 3   3 c #> 4   4 d #> 5   5 e #> 6   6 f #> 7   7 g #> 8   8 h #> 9   9 i #> 10 10 j #>"},{"path":"/reference/dirCreate.html","id":null,"dir":"Reference","previous_headings":"","what":"Replacement for dir.create() — dirCreate","title":"Replacement for dir.create() — dirCreate","text":"function somewhat friendlier version dir.create automatically sets recursive=TRUE showWarnings=FALSE arguments.","code":""},{"path":"/reference/dirCreate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replacement for dir.create() — dirCreate","text":"","code":"dirCreate(...)"},{"path":"/reference/dirCreate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replacement for dir.create() — dirCreate","text":"... Character string(s). path name directory create. Multiple strings pasted together one path, although slashes pasted .","code":""},{"path":"/reference/dirCreate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replacement for dir.create() — dirCreate","text":"Nothing (creates directory storage system).","code":""},{"path":[]},{"path":"/reference/domLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of month for leap years — domLeap","title":"Day of month for leap years — domLeap","text":"Data frame day month month leap year.","code":""},{"path":"/reference/domLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of month for leap years — domLeap","text":"","code":"domLeap"},{"path":"/reference/domLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Day of month for leap years — domLeap","text":"object class 'data.frame'.","code":""},{"path":"/reference/domLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of month for leap years — domLeap","text":"","code":"data(domLeap) domLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1      1      1      1      1      1      1      1      1       1 #> 2       2      2      2      2      2      2      2      2      2       2 #> 3       3      3      3      3      3      3      3      3      3       3 #> 4       4      4      4      4      4      4      4      4      4       4 #> 5       5      5      5      5      5      5      5      5      5       5 #> 6       6      6      6      6      6      6      6      6      6       6 #> 7       7      7      7      7      7      7      7      7      7       7 #> 8       8      8      8      8      8      8      8      8      8       8 #> 9       9      9      9      9      9      9      9      9      9       9 #> 10     10     10     10     10     10     10     10     10     10      10 #> 11     11     11     11     11     11     11     11     11     11      11 #> 12     12     12     12     12     12     12     12     12     12      12 #> 13     13     13     13     13     13     13     13     13     13      13 #> 14     14     14     14     14     14     14     14     14     14      14 #> 15     15     15     15     15     15     15     15     15     15      15 #> 16     16     16     16     16     16     16     16     16     16      16 #> 17     17     17     17     17     17     17     17     17     17      17 #> 18     18     18     18     18     18     18     18     18     18      18 #> 19     19     19     19     19     19     19     19     19     19      19 #> 20     20     20     20     20     20     20     20     20     20      20 #> 21     21     21     21     21     21     21     21     21     21      21 #> 22     22     22     22     22     22     22     22     22     22      22 #> 23     23     23     23     23     23     23     23     23     23      23 #> 24     24     24     24     24     24     24     24     24     24      24 #> 25     25     25     25     25     25     25     25     25     25      25 #> 26     26     26     26     26     26     26     26     26     26      26 #> 27     27     27     27     27     27     27     27     27     27      27 #> 28     28     28     28     28     28     28     28     28     28      28 #> 29     29     29     29     29     29     29     29     29     29      29 #> 30     30     NA     30     30     30     30     30     30     30      30 #> 31     31     NA     31     NA     31     NA     31     31     NA      31 #>    month11 month12 #> 1        1       1 #> 2        2       2 #> 3        3       3 #> 4        4       4 #> 5        5       5 #> 6        6       6 #> 7        7       7 #> 8        8       8 #> 9        9       9 #> 10      10      10 #> 11      11      11 #> 12      12      12 #> 13      13      13 #> 14      14      14 #> 15      15      15 #> 16      16      16 #> 17      17      17 #> 18      18      18 #> 19      19      19 #> 20      20      20 #> 21      21      21 #> 22      22      22 #> 23      23      23 #> 24      24      24 #> 25      25      25 #> 26      26      26 #> 27      27      27 #> 28      28      28 #> 29      29      29 #> 30      30      30 #> 31      NA      31"},{"path":"/reference/domNonLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of month for non-leap years — domNonLeap","title":"Day of month for non-leap years — domNonLeap","text":"Data frame day month month non-leap year.","code":""},{"path":"/reference/domNonLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of month for non-leap years — domNonLeap","text":"","code":"domNonLeap"},{"path":"/reference/domNonLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Day of month for non-leap years — domNonLeap","text":"object class 'data.frame'.","code":""},{"path":"/reference/domNonLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of month for non-leap years — domNonLeap","text":"","code":"data(domNonLeap) domNonLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1      1      1      1      1      1      1      1      1       1 #> 2       2      2      2      2      2      2      2      2      2       2 #> 3       3      3      3      3      3      3      3      3      3       3 #> 4       4      4      4      4      4      4      4      4      4       4 #> 5       5      5      5      5      5      5      5      5      5       5 #> 6       6      6      6      6      6      6      6      6      6       6 #> 7       7      7      7      7      7      7      7      7      7       7 #> 8       8      8      8      8      8      8      8      8      8       8 #> 9       9      9      9      9      9      9      9      9      9       9 #> 10     10     10     10     10     10     10     10     10     10      10 #> 11     11     11     11     11     11     11     11     11     11      11 #> 12     12     12     12     12     12     12     12     12     12      12 #> 13     13     13     13     13     13     13     13     13     13      13 #> 14     14     14     14     14     14     14     14     14     14      14 #> 15     15     15     15     15     15     15     15     15     15      15 #> 16     16     16     16     16     16     16     16     16     16      16 #> 17     17     17     17     17     17     17     17     17     17      17 #> 18     18     18     18     18     18     18     18     18     18      18 #> 19     19     19     19     19     19     19     19     19     19      19 #> 20     20     20     20     20     20     20     20     20     20      20 #> 21     21     21     21     21     21     21     21     21     21      21 #> 22     22     22     22     22     22     22     22     22     22      22 #> 23     23     23     23     23     23     23     23     23     23      23 #> 24     24     24     24     24     24     24     24     24     24      24 #> 25     25     25     25     25     25     25     25     25     25      25 #> 26     26     26     26     26     26     26     26     26     26      26 #> 27     27     27     27     27     27     27     27     27     27      27 #> 28     28     28     28     28     28     28     28     28     28      28 #> 29     29     NA     29     29     29     29     29     29     29      29 #> 30     30     NA     30     30     30     30     30     30     30      30 #> 31     31     NA     31     NA     31     NA     31     31     NA      31 #>    month11 month12 #> 1        1       1 #> 2        2       2 #> 3        3       3 #> 4        4       4 #> 5        5       5 #> 6        6       6 #> 7        7       7 #> 8        8       8 #> 9        9       9 #> 10      10      10 #> 11      11      11 #> 12      12      12 #> 13      13      13 #> 14      14      14 #> 15      15      15 #> 16      16      16 #> 17      17      17 #> 18      18      18 #> 19      19      19 #> 20      20      20 #> 21      21      21 #> 22      22      22 #> 23      23      23 #> 24      24      24 #> 25      25      25 #> 26      26      26 #> 27      27      27 #> 28      28      28 #> 29      29      29 #> 30      30      30 #> 31      NA      31"},{"path":"/reference/doyLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of year for leap years — doyLeap","title":"Day of year for leap years — doyLeap","text":"Data frame day year month leap year.","code":""},{"path":"/reference/doyLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of year for leap years — doyLeap","text":"","code":"doyLeap"},{"path":"/reference/doyLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Day of year for leap years — doyLeap","text":"object class 'data.frame'.","code":""},{"path":"/reference/doyLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of year for leap years — doyLeap","text":"","code":"data(doyLeap) doyLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1     32     61     92    122    153    183    214    245     275 #> 2       2     33     62     93    123    154    184    215    246     276 #> 3       3     34     63     94    124    155    185    216    247     277 #> 4       4     35     64     95    125    156    186    217    248     278 #> 5       5     36     65     96    126    157    187    218    249     279 #> 6       6     37     66     97    127    158    188    219    250     280 #> 7       7     38     67     98    128    159    189    220    251     281 #> 8       8     39     68     99    129    160    190    221    252     282 #> 9       9     40     69    100    130    161    191    222    253     283 #> 10     10     41     70    101    131    162    192    223    254     284 #> 11     11     42     71    102    132    163    193    224    255     285 #> 12     12     43     72    103    133    164    194    225    256     286 #> 13     13     44     73    104    134    165    195    226    257     287 #> 14     14     45     74    105    135    166    196    227    258     288 #> 15     15     46     75    106    136    167    197    228    259     289 #> 16     16     47     76    107    137    168    198    229    260     290 #> 17     17     48     77    108    138    169    199    230    261     291 #> 18     18     49     78    109    139    170    200    231    262     292 #> 19     19     50     79    110    140    171    201    232    263     293 #> 20     20     51     80    111    141    172    202    233    264     294 #> 21     21     52     81    112    142    173    203    234    265     295 #> 22     22     53     82    113    143    174    204    235    266     296 #> 23     23     54     83    114    144    175    205    236    267     297 #> 24     24     55     84    115    145    176    206    237    268     298 #> 25     25     56     85    116    146    177    207    238    269     299 #> 26     26     57     86    117    147    178    208    239    270     300 #> 27     27     58     87    118    148    179    209    240    271     301 #> 28     28     59     88    119    149    180    210    241    272     302 #> 29     29     60     89    120    150    181    211    242    273     303 #> 30     30     NA     90    121    151    182    212    243    274     304 #> 31     31     NA     91     NA    152     NA    213    244     NA     305 #>    month11 month12 #> 1      306     336 #> 2      307     337 #> 3      308     338 #> 4      309     339 #> 5      310     340 #> 6      311     341 #> 7      312     342 #> 8      313     343 #> 9      314     344 #> 10     315     345 #> 11     316     346 #> 12     317     347 #> 13     318     348 #> 14     319     349 #> 15     320     350 #> 16     321     351 #> 17     322     352 #> 18     323     353 #> 19     324     354 #> 20     325     355 #> 21     326     356 #> 22     327     357 #> 23     328     358 #> 24     329     359 #> 25     330     360 #> 26     331     361 #> 27     332     362 #> 28     333     363 #> 29     334     364 #> 30     335     365 #> 31      NA     366"},{"path":"/reference/doyNonLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Days of year for non-leap years — doyNonLeap","title":"Days of year for non-leap years — doyNonLeap","text":"Data frame days year month non-leap year","code":""},{"path":"/reference/doyNonLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Days of year for non-leap years — doyNonLeap","text":"","code":"doyNonLeap"},{"path":"/reference/doyNonLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Days of year for non-leap years — doyNonLeap","text":"object class 'data.frame'.","code":""},{"path":"/reference/doyNonLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Days of year for non-leap years — doyNonLeap","text":"","code":"data(doyNonLeap) doyNonLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1     32     60     91    121    152    182    213    244     274 #> 2       2     33     61     92    122    153    183    214    245     275 #> 3       3     34     62     93    123    154    184    215    246     276 #> 4       4     35     63     94    124    155    185    216    247     277 #> 5       5     36     64     95    125    156    186    217    248     278 #> 6       6     37     65     96    126    157    187    218    249     279 #> 7       7     38     66     97    127    158    188    219    250     280 #> 8       8     39     67     98    128    159    189    220    251     281 #> 9       9     40     68     99    129    160    190    221    252     282 #> 10     10     41     69    100    130    161    191    222    253     283 #> 11     11     42     70    101    131    162    192    223    254     284 #> 12     12     43     71    102    132    163    193    224    255     285 #> 13     13     44     72    103    133    164    194    225    256     286 #> 14     14     45     73    104    134    165    195    226    257     287 #> 15     15     46     74    105    135    166    196    227    258     288 #> 16     16     47     75    106    136    167    197    228    259     289 #> 17     17     48     76    107    137    168    198    229    260     290 #> 18     18     49     77    108    138    169    199    230    261     291 #> 19     19     50     78    109    139    170    200    231    262     292 #> 20     20     51     79    110    140    171    201    232    263     293 #> 21     21     52     80    111    141    172    202    233    264     294 #> 22     22     53     81    112    142    173    203    234    265     295 #> 23     23     54     82    113    143    174    204    235    266     296 #> 24     24     55     83    114    144    175    205    236    267     297 #> 25     25     56     84    115    145    176    206    237    268     298 #> 26     26     57     85    116    146    177    207    238    269     299 #> 27     27     58     86    117    147    178    208    239    270     300 #> 28     28     59     87    118    148    179    209    240    271     301 #> 29     29     NA     88    119    149    180    210    241    272     302 #> 30     30     NA     89    120    150    181    211    242    273     303 #> 31     31     NA     90     NA    151     NA    212    243     NA     304 #>    month11 month12 #> 1      305     335 #> 2      306     336 #> 3      307     337 #> 4      308     338 #> 5      309     339 #> 6      310     340 #> 7      311     341 #> 8      312     342 #> 9      313     343 #> 10     314     344 #> 11     315     345 #> 12     316     346 #> 13     317     347 #> 14     318     348 #> 15     319     349 #> 16     320     350 #> 17     321     351 #> 18     322     352 #> 19     323     353 #> 20     324     354 #> 21     325     355 #> 22     326     356 #> 23     327     357 #> 24     328     358 #> 25     329     359 #> 26     330     360 #> 27     331     361 #> 28     332     362 #> 29     333     363 #> 30     334     364 #> 31      NA     365"},{"path":"/reference/ellipseNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","title":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","text":"function returns names objects input function ellipses. useful called inside function.","code":""},{"path":"/reference/ellipseNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","text":"","code":"ellipseNames(...)"},{"path":"/reference/ellipseNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","text":"... Objects.","code":""},{"path":"/reference/ellipseNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","text":"Character list.","code":""},{"path":"/reference/eps.html","id":null,"dir":"Reference","previous_headings":"","what":"The smallest machine-readable number — eps","title":"The smallest machine-readable number — eps","text":"function returns smallest machine-readable number (equal .Machine$double.eps).","code":""},{"path":"/reference/eps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The smallest machine-readable number — eps","text":"","code":"eps()"},{"path":"/reference/eps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The smallest machine-readable number — eps","text":"Numeric value.","code":""},{"path":"/reference/eps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The smallest machine-readable number — eps","text":"","code":"eps() #> [1] 2.220446e-16"},{"path":"/reference/insert.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert values into a vector — insert","title":"Insert values into a vector — insert","text":"function inserts values vector, lengthening overall vector. different , say, x[1:3] <- c('', 'b', 'c') simply replaces values indices 1 3.","code":""},{"path":"/reference/insert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert values into a vector — insert","text":"","code":"insert(x, into, at, warn = TRUE)"},{"path":"/reference/insert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert values into a vector — insert","text":"x Vector values insert. vector values insert x. Vector positions (indices) x inserted. length x shorter length , values x recycled warning produced. warn TRUE, provide warnings.","code":""},{"path":"/reference/insert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert values into a vector — insert","text":"Vector.","code":""},{"path":[]},{"path":"/reference/insert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert values into a vector — insert","text":"","code":"x <- -1:-3 into <- 10:20 at <- c(1, 3, 14) insert(x, into, at) #>  [1] -1 10 -2 11 12 13 14 15 16 17 18 19 20 -3  insert(-1, into, at) #> Warning: Length of x is shorter than the length of at. Recycling x. #>  [1] -1 10 -1 11 12 13 14 15 16 17 18 19 20 -1"},{"path":"/reference/insertCol.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert a column or row into a data frame or matrix — insertCol","title":"Insert a column or row into a data frame or matrix — insertCol","text":"function inserts one columns rows another column row data frame matrix. similar cbind except inserted column(s)/row(s) can placed anywhere.","code":""},{"path":"/reference/insertCol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert a column or row into a data frame or matrix — insertCol","text":"","code":"insertCol(x, into, at = NULL, before = TRUE)  insertRow(x, into, at = NULL, before = TRUE)"},{"path":"/reference/insertCol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert a column or row into a data frame or matrix — insertCol","text":"x Data frame, matrix, vector number columns rows elements . Data frame matrix x inserted. Character, integer, NULL. Name column column number name row row number insertion. NULL (default), result exactly cbind(, x except retains row numbers column names . Logical, TRUE (default) insertion occur front column row named , FALSE . Ignored NULL.","code":""},{"path":"/reference/insertCol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert a column or row into a data frame or matrix — insertCol","text":"data frame.","code":""},{"path":"/reference/insertCol.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Insert a column or row into a data frame or matrix — insertCol","text":"insertRow(): Insert column row data frame matrix","code":""},{"path":[]},{"path":"/reference/insertCol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert a column or row into a data frame or matrix — insertCol","text":"","code":"x <- data.frame(y1=11:15, y2=rev(letters)[1:5]) into <- data.frame(x1=1:5, x2='valid', x3=letters[1:5], x4=LETTERS[1:5], x5='stuff')  insertCol(x, into=into, at='x3') #>   x1    x2 y1 y2 x3 x4    x5 #> 1  1 valid 11  z  a  A stuff #> 2  2 valid 12  y  b  B stuff #> 3  3 valid 13  x  c  C stuff #> 4  4 valid 14  w  d  D stuff #> 5  5 valid 15  v  e  E stuff insertCol(x, into=into, at='x3', before=FALSE) #>   x1    x2 x3 y1 y2 x4    x5 #> 1  1 valid  a 11  z  A stuff #> 2  2 valid  b 12  y  B stuff #> 3  3 valid  c 13  x  C stuff #> 4  4 valid  d 14  w  D stuff #> 5  5 valid  e 15  v  E stuff insertCol(x, into) #>   x1    x2 x3 x4    x5 y1 y2 #> 1  1 valid  a  A stuff 11  z #> 2  2 valid  b  B stuff 12  y #> 3  3 valid  c  C stuff 13  x #> 4  4 valid  d  D stuff 14  w #> 5  5 valid  e  E stuff 15  v  x <- data.frame(x1=1:3, x2=LETTERS[1:3]) into <- data.frame(x1=11:15, x2='valid') row.names(into) <- letters[1:5]  insertRow(x, into=into, at='b') #>   x1    x2 #> a 11 valid #> 1  1     A #> 2  2     B #> 3  3     C #> b 12 valid #> c 13 valid #> d 14 valid #> e 15 valid insertRow(x, into=into, at='b', before=FALSE) #>   x1    x2 #> a 11 valid #> b 12 valid #> 1  1     A #> 2  2     B #> 3  3     C #> c 13 valid #> d 14 valid #> e 15 valid insertRow(x, into) #>   x1    x2 #> a 11 valid #> b 12 valid #> c 13 valid #> d 14 valid #> e 15 valid #> 1  1     A #> 2  2     B #> 3  3     C"},{"path":"/reference/isLeapYear.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a year a leap year? — isLeapYear","title":"Is a year a leap year? — isLeapYear","text":"Returns TRUE year leap year. can use \"negative\" years BCE.","code":""},{"path":"/reference/isLeapYear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a year a leap year? — isLeapYear","text":"","code":"isLeapYear(x)"},{"path":"/reference/isLeapYear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a year a leap year? — isLeapYear","text":"x Integer vector integers representing years.","code":""},{"path":"/reference/isLeapYear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a year a leap year? — isLeapYear","text":"Vector logical values.","code":""},{"path":"/reference/isLeapYear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is a year a leap year? — isLeapYear","text":"","code":"isLeapYear(1990:2004) # note 2000 *was* not a leap year #>  [1] FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE #> [13] FALSE FALSE  TRUE isLeapYear(1896:1904) # 1900 was *not* a leap year #> [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE"},{"path":"/reference/isTRUENA.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized test for truth robust to NA — isTRUENA","title":"Vectorized test for truth robust to NA — isTRUENA","text":"functions work exactly x == TRUE x == FALSE default return FALSE cases NA.","code":""},{"path":"/reference/isTRUENA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized test for truth robust to NA — isTRUENA","text":"","code":"isTRUENA(x, ifNA = FALSE)  isFALSENA(x, ifNA = FALSE)"},{"path":"/reference/isTRUENA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized test for truth robust to NA — isTRUENA","text":"x Single value condition vector values evaluate. ifNA Logical, value return result evaluating x NA. Note can anything (.e., TRUE, FALSE, number, etc.).","code":""},{"path":"/reference/isTRUENA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorized test for truth robust to NA — isTRUENA","text":"Logical value specified ifNA.","code":""},{"path":"/reference/isTRUENA.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Vectorized test for truth robust to NA — isTRUENA","text":"isFALSENA(): Vectorized test truth robust NA","code":""},{"path":[]},{"path":"/reference/isTRUENA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorized test for truth robust to NA — isTRUENA","text":"","code":"x <- c(TRUE, TRUE, FALSE, NA) x == TRUE #> [1]  TRUE  TRUE FALSE    NA isTRUENA(x) #> [1]  TRUE  TRUE FALSE FALSE x == FALSE #> [1] FALSE FALSE  TRUE    NA isFALSENA(x) #> [1] FALSE FALSE  TRUE FALSE isTRUENA(x, ifNA = Inf) #> [1]   1   1   0 Inf # note that isTRUE and isFALSE are not vectorized isTRUE(x) #> [1] FALSE isFALSE(x) #> [1] FALSE"},{"path":"/reference/listFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Replacement for list.files() — listFiles","title":"Replacement for list.files() — listFiles","text":"function slightly friendlier version list.files automatically includes full.names=TRUE argument.","code":""},{"path":"/reference/listFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replacement for list.files() — listFiles","text":"","code":"listFiles(x, ...)"},{"path":"/reference/listFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replacement for list.files() — listFiles","text":"x Path name folder containing files list. ... Arguments pass list.files (full.names).","code":""},{"path":"/reference/listFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replacement for list.files() — listFiles","text":"Character list.","code":""},{"path":[]},{"path":"/reference/listFiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replacement for list.files() — listFiles","text":"","code":"# list files in location where R is installed listFiles(R.home()) #>  [1] \"/Library/Frameworks/R.framework/Resources/COPYING\"      #>  [2] \"/Library/Frameworks/R.framework/Resources/Info.plist\"   #>  [3] \"/Library/Frameworks/R.framework/Resources/R\"            #>  [4] \"/Library/Frameworks/R.framework/Resources/Rscript\"      #>  [5] \"/Library/Frameworks/R.framework/Resources/SVN-REVISION\" #>  [6] \"/Library/Frameworks/R.framework/Resources/bin\"          #>  [7] \"/Library/Frameworks/R.framework/Resources/doc\"          #>  [8] \"/Library/Frameworks/R.framework/Resources/etc\"          #>  [9] \"/Library/Frameworks/R.framework/Resources/fontconfig\"   #> [10] \"/Library/Frameworks/R.framework/Resources/include\"      #> [11] \"/Library/Frameworks/R.framework/Resources/lib\"          #> [12] \"/Library/Frameworks/R.framework/Resources/library\"      #> [13] \"/Library/Frameworks/R.framework/Resources/man1\"         #> [14] \"/Library/Frameworks/R.framework/Resources/modules\"      #> [15] \"/Library/Frameworks/R.framework/Resources/share\"        #> [16] \"/Library/Frameworks/R.framework/Resources/tests\"        listFiles(R.home(), pattern='README') #> character(0)"},{"path":"/reference/longRun.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of the longest run of a particular value in a numeric vector — longRun","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"function returns lengh longest run particular numeric value numeric vector.  \"run\" uninterrupted  sequence number. Runs can \"wrapped\" sequence starts ends target value considered consecutive run.","code":""},{"path":"/reference/longRun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"","code":"longRun(x, val, wrap = FALSE, na.rm = FALSE)"},{"path":"/reference/longRun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"x Numeric vector. val Numeric. Value elements x calculate length longest run. wrap Logical. TRUE runs can \"wrap\" end x start x first last elements x equal val. na.rm Logical. TRUE remove NAs first.","code":""},{"path":"/reference/longRun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"Integer.","code":""},{"path":[]},{"path":"/reference/longRun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"","code":"x <- c(1, 1, 1, 2, 2, 3, 4, 5, 6, 1, 1, 1, 1, 1) longRun(x, 2) #> [1] 2 longRun(x, 1) #> [1] 5 longRun(x, 1, wrap=TRUE) #> [1] 8"},{"path":"/reference/maxRuns.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum number of continuous ","title":"Maximum number of continuous ","text":"Consider ordered set values, say 1, 4, 0, 0, 0, 2, 0, 10. can ask, number times zeroes appear successively? example, one set three continuous zeros, one set single zero. number runs zero 2, maximum run length 3. function calculates number runs based certain condition defining run. condition stated function returns logical value. function example function(x) x == 0.","code":""},{"path":"/reference/maxRuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum number of continuous ","text":"","code":"maxRuns(x, fx, args = NULL, failIfAllNA = FALSE)"},{"path":"/reference/maxRuns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum number of continuous ","text":"x Vector numeric, character, values. fx function returns TRUE, FALSE, (optionally) NA. function must use x first argument. example, function(x) x == 0 allowable, function(y) y == 0 . Values count TRUE counted toward run. args list object additional arguments supply function fx. failIfAllNA TRUE, fail values NA evaluated fx.","code":""},{"path":"/reference/maxRuns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum number of continuous ","text":"Lengths successive runs elements meet criterion. single value 0 indicates conditions meet criterion.","code":""},{"path":"/reference/maxRuns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum number of continuous ","text":"","code":"x <- c(1, 4, 0, 0, 0, 2, 0, 10) fx <- function(x) x == 0 maxRuns(x, fx) #> [1] 3  fx <- function(x) x > 0 maxRuns(x, fx) #> [1] 2   fx <- function(x) x > 0 & x < 5 maxRuns(x, fx) #> [1] 2  x <- c(1, 4, 0, 0, 0, 2, 0, 10) fx <- function(x, th) x == th maxRuns(x, fx, args=list(th=0)) #> [1] 3  # \"count\" NA as an observation  x <- c(1, 4, 0, 0, 0, NA, 0, 10) fx <- function(x, th) ifelse(is.na(x), FALSE, x == th) maxRuns(x, fx, args=list(th=0)) #> [1] 3   # include NAs as part of a run x <- c(1, 4, 0, 0, 0, NA, 0, 10) fx <- function(x, th) ifelse(is.na(x), TRUE, x == th) maxRuns(x, fx, args=list(th=0)) #> [1] 5"},{"path":"/reference/memUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Size of objects taking most memory use — memUse","title":"Size of objects taking most memory use — memUse","text":"Displays largest objects memUse.","code":""},{"path":"/reference/memUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Size of objects taking most memory use — memUse","text":"","code":"memUse(   n = 10,   orderBy = \"size\",   decreasing = TRUE,   pos = 1,   display = TRUE,   ... )"},{"path":"/reference/memUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Size of objects taking most memory use — memUse","text":"n Positive integer, maximum number objects display. orderBy Either 'size' (default) 'name'. decreasing Logical, TRUE (default), objects displayed largest smallest. pos Environment obtain size objects. Default 1. See ls.#\" display TRUE (default), print table memUse used. ... arguments pass ls.","code":""},{"path":"/reference/memUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Size of objects taking most memory use — memUse","text":"Data frame (invisible).","code":""},{"path":"/reference/memUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Size of objects taking most memory use — memUse","text":"","code":"memUse() #>                    size #> tuition_cost     497832 #> salary_potential 139232 #> combined         123920 #> temp              46640 #> temp2             46640 #> domLeap            3648 #> domNonLeap         3648 #> doyLeap            3648 #> doyNonLeap         3648 #> ind                 592 memUse(3) #>                    size #> tuition_cost     497832 #> salary_potential 139232 #> combined         123920"},{"path":"/reference/mergeLists.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two lists with precedence — mergeLists","title":"Merge two lists with precedence — mergeLists","text":"function merges two lists create single, combined list. conflict (e.g., two elements name), items second list gain preference. Adapted Stack Overflow (http://stackoverflow.com/questions/13811501/r-merge-lists--overwrite--recursion).","code":""},{"path":"/reference/mergeLists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two lists with precedence — mergeLists","text":"","code":"mergeLists(list1, list2)"},{"path":"/reference/mergeLists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two lists with precedence — mergeLists","text":"list1 List object. list2 List object.","code":""},{"path":"/reference/mergeLists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two lists with precedence — mergeLists","text":"List object.","code":""},{"path":"/reference/mergeLists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two lists with precedence — mergeLists","text":"","code":"list1 <- list(a=1:3, b='Hello world', c=LETTERS[1:3]) list2 <- list(x=4, b='Goodbye world', z=letters[1:2]) mergeLists(list1, list2) #> $x #> [1] 4 #>  #> $b #> [1] \"Goodbye world\" #>  #> $z #> [1] \"a\" \"b\" #>  #> $a #> [1] 1 2 3 #>  #> $c #> [1] \"A\" \"B\" \"C\" #>  mergeLists(list2, list1) #> $a #> [1] 1 2 3 #>  #> $b #> [1] \"Hello world\" #>  #> $c #> [1] \"A\" \"B\" \"C\" #>  #> $x #> [1] 4 #>  #> $z #> [1] \"a\" \"b\" #>  list3 <- list(m=list(n=4:7, o=pi), a=1:5) mergeLists(list1, list3) #> $m #> $m$n #> [1] 4 5 6 7 #>  #> $m$o #> [1] 3.141593 #>  #>  #> $a #> [1] 1 2 3 4 5 #>  #> $b #> [1] \"Hello world\" #>  #> $c #> [1] \"A\" \"B\" \"C\" #>"},{"path":"/reference/mirror.html","id":null,"dir":"Reference","previous_headings":"","what":"Flip an object — mirror","title":"Flip an object — mirror","text":"function creates \"mirror\" image character string, number, matrix, data frame. example \"Shots exchanged hospital\" becomes \"latipsoh eht ta degnahcxe erew stohS' 3.14159 becomes 95141.3. Data frames matrices returned order columns order rows reversed.","code":""},{"path":"/reference/mirror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flip an object — mirror","text":"","code":"mirror(x, direction = \"lr\")"},{"path":"/reference/mirror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flip an object — mirror","text":"x Numeric character, vector numeric character values, matrix data frame. direction used x matrix data frame. Accepted values 'lr' (left-right mirror) 'ud' (-mirror).","code":""},{"path":"/reference/mirror.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flip an object — mirror","text":"Object class x.","code":""},{"path":"/reference/mirror.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flip an object — mirror","text":"","code":"x <- 'Shots were exchanged at the hospital' mirror(x) #> [1] \"latipsoh eht ta degnahcxe erew stohS\"  x <- c('Water', 'water', 'everywhere') mirror(x) #> [1] \"retaW\"      \"retaw\"      \"erehwyreve\"  # last value will return NA because the exponentiation does not  # make sense when written backwards x <- c(3.14159, 2.71828, 6.02214076e+23)  mirror(x) #> Warning: NAs introduced by coercion #> [1] 95141.3 82817.2      NA x <- data.frame(x=1:5, y=6:10) mirror(x) #>    y x #> 1  6 1 #> 2  7 2 #> 3  8 3 #> 4  9 4 #> 5 10 5  x <- matrix(1:10, nrow=2) mirror(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    9    7    5    3    1 #> [2,]   10    8    6    4    2 #> attr(,\"class\") #> [1] \"matrix\" \"array\""},{"path":"/reference/mmode.html","id":null,"dir":"Reference","previous_headings":"","what":"Modal value(s) — mmode","title":"Modal value(s) — mmode","text":"Modal value. one unique mode, modal values returned.","code":""},{"path":"/reference/mmode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modal value(s) — mmode","text":"","code":"mmode(x)"},{"path":"/reference/mmode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modal value(s) — mmode","text":"x Numeric character vector.","code":""},{"path":"/reference/mmode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modal value(s) — mmode","text":"Numeric character vector.","code":""},{"path":"/reference/mmode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modal value(s) — mmode","text":"","code":"x <- c(1, 2, 3, 3, 4, 5, 3, 1, 2) mmode(x) #> [1] 3  x <- c(1, 2, 3) mmode(x) #> [1] 1 2 3"},{"path":"/reference/naCompare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"function set operators perform simple (vectorized) comparisons using <, <=, >, >=, !=, == values always returns TRUE FALSE. TRUE occurs condition can evaluated TRUE. FALSE returned condition FALSE evaluated.","code":""},{"path":"/reference/naCompare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"","code":"naCompare(op, x, y)  x %<na% y  x %<=na% y  x %==na% y  x %!=na% y  x %>na% y  x %>=na% y"},{"path":"/reference/naCompare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"op Character, operation perform: '<', '<=', '>', '>=', '!=', '=='. Note must character (.e., put quotes). x, y Vectors numeric, character, NA, /NaN values. first value operation x XXX y XXX operator op. x shorter y x recycled.","code":""},{"path":"/reference/naCompare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"Vector logical values.","code":""},{"path":"/reference/naCompare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"","code":"naCompare('<', c(1, 2, NA), c(10, 1, 0)) #> [1]  TRUE FALSE FALSE naCompare('<', c(1, 2, NA), 10) #> [1]  TRUE  TRUE FALSE naCompare('<', c(1, 2, NA), NA) #> [1] FALSE FALSE FALSE # compare to: NA < 5 #> [1] NA NA < NA #> [1] NA  # same operations with operators: 1 %<na% 2 #> [1] TRUE 1 %<na% NA #> [1] FALSE 3 %==na% 3 #> [1] TRUE NA %==na% 3 #> [1] FALSE 4 %!=na% 4 #> [1] FALSE 4 %!=na% NA #> [1] FALSE 5 %>=na% 3 #> [1] TRUE 5 %>=na% NA #> [1] FALSE 3 %==na% c(NA, 1, 2, 3, 4) #> [1] FALSE FALSE FALSE  TRUE FALSE  # compare to: 1 < 2 #> [1] TRUE 1 < NA #> [1] NA 3 == 3 #> [1] TRUE NA == 3 #> [1] NA 4 != 4 #> [1] FALSE 4 != NA #> [1] NA 5 >= 3 #> [1] TRUE 5 >= NA #> [1] NA 3 == c(NA, 1, 2, 3, 4) #> [1]    NA FALSE FALSE  TRUE FALSE"},{"path":"/reference/naOmitMulti.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove NAs from one or more equal-length vectors — naOmitMulti","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"function removes elements one equal-length vectors one NA position. example, three vectors , B, C, NA first position C NA third position, , B, C elements positions 1 3 removed.","code":""},{"path":"/reference/naOmitMulti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"","code":"naOmitMulti(...)"},{"path":"/reference/naOmitMulti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"... Vectors (numeric character).","code":""},{"path":"/reference/naOmitMulti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"List objects class ....","code":""},{"path":[]},{"path":"/reference/naOmitMulti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"","code":"a <- c(NA, 'b', 'c', 'd', 'e', NA) b <- c(1, 2, 3, NA, 5, NA) c <- c(6, 7, 8, 9, 10, NA) naOmitMulti(a, b, c) #> [[1]] #> [1] \"b\" \"c\" \"e\" #>  #> [[2]] #> [1] 2 3 5 #>  #> [[3]] #> [1]  7  8 10 #>"},{"path":"/reference/naRows.html","id":null,"dir":"Reference","previous_headings":"","what":"Index of rows in a data frame or matrix that contain at least one NA — naRows","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"function returns row number row data frame matrix least one NA. (!complete.cases(x)).","code":""},{"path":"/reference/naRows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"","code":"naRows(x, inf = FALSE, inverse = FALSE)"},{"path":"/reference/naRows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"x Data frame matrix. inf Logical, TRUE also return row numbers rows least one element Inf -Inf. default FALSE. inverse Logical, TRUE return row numbers rows NAs (possibly Inf -Inf).  default FALSE.","code":""},{"path":"/reference/naRows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"Integer vector.","code":""},{"path":"/reference/naRows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"","code":"x <- data.frame(a=1:5, b=c(1, 2, NA, 4, 5), c=c('a', 'b', 'c', 'd', NA)) naRows(x) #> [1] 3 5"},{"path":"/reference/omnibus.html","id":null,"dir":"Reference","previous_headings":"","what":"omnibus: Fantabulous helper functions — omnibus","title":"omnibus: Fantabulous helper functions — omnibus","text":"package contains set helper functions.","code":""},{"path":"/reference/omnibus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"omnibus: Fantabulous helper functions — omnibus","text":"Create issue GitHub.","code":""},{"path":"/reference/omnibus.html","id":"data-manipulation","dir":"Reference","previous_headings":"","what":"Data manipulation","title":"omnibus: Fantabulous helper functions — omnibus","text":"bracket: Find values bracket given number. combineDf: Combine data frames different schema. corner: Corner matrix data frame. cull: Force vectors matrices/data frames length number rows. insert: Insert values vector. insertCol insertRow: Insert column(s)/row(s) matrix data frame. maxRuns: Maximum number continuous \"runs\" values meeting particular condition. mirror: Flip object left-right (-). mmode: Modal value(s). mergeLists: Merge lists. renumSeq: Renumber sequence. rotateMatrix: Rotate matrix. roundTo: Rounds value nearest target value. rowColIndexing: Convert row column indexing matrix. stretchMinMax: Rescale values given range.","code":""},{"path":"/reference/omnibus.html","id":"dates","dir":"Reference","previous_headings":"","what":"Dates","title":"omnibus: Fantabulous helper functions — omnibus","text":"domLeap: Data frame days month leap year. domNonLeap: Data frame days month non-leap year. doyLeap: Data frame days year leap year. doyNonLeap: Data frame days year non-leap year. isLeapYear: year leap year?  yearFromDate: Attempt find year across dates non-standard formats.","code":""},{"path":"/reference/omnibus.html","id":"geometry","dir":"Reference","previous_headings":"","what":"Geometry","title":"omnibus: Fantabulous helper functions — omnibus","text":"pairDist: Pairwise Euclidean distance two sets points. quadArea: Area quadrilateral.","code":""},{"path":"/reference/omnibus.html","id":"handling-nas","dir":"Reference","previous_headings":"","what":"Handling NAs","title":"omnibus: Fantabulous helper functions — omnibus","text":"%<=na%, %==na%, %!=na%, %>na%, %>=na%: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). isTRUENA isFALSENA: Logical operators robust NA. naCompare: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). naOmitMulti: Remove elements multiple vectors least one element NA rows matrices/data frames least one row NA. naRows: Indices rows least one NA. (!complete.cases(x)).","code":""},{"path":"/reference/omnibus.html","id":"data-properties","dir":"Reference","previous_headings":"","what":"Data properties","title":"omnibus: Fantabulous helper functions — omnibus","text":"countDecDigits: Count number digits decimal. longRun: Longest run given sequence vector. roundedSigDigits: Infers number significant digits represented decimal representation division operation digits place integer rounded. .pmax .pmin: Combine .max pmax, .min pmin (vectorized .max .min).","code":""},{"path":"/reference/omnibus.html","id":"system","dir":"Reference","previous_headings":"","what":"System","title":"omnibus: Fantabulous helper functions — omnibus","text":"dirCreate: Nicer version dir.create. eps: Smallest floating point value computer can think . listFiles: Nicer version list.files. memUse: Display largest objects memory.","code":""},{"path":"/reference/omnibus.html","id":"text","dir":"Reference","previous_headings":"","what":"Text","title":"omnibus: Fantabulous helper functions — omnibus","text":"capIt: Capitalize first letter string. prefix: Add repeating character string ensure user-defined length (e.g., 7 --> 007). say: Replacement print('abc'); flush.console.","code":""},{"path":"/reference/omnibus.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"omnibus: Fantabulous helper functions — omnibus","text":"Adam B. Smith","code":""},{"path":"/reference/pairDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate pairwise distances between two matrices or data frames. — pairDist","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"function takes two data frames matrices returns matrix pairwise Euclidean distances two.","code":""},{"path":"/reference/pairDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"","code":"pairDist(x1, x2 = NULL, na.rm = FALSE)"},{"path":"/reference/pairDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"x1 Data frame matrix one columns wide. x2 Data frame matrix one columns wide. NULL, pairwise distances points x1 calculated. na.rm Logical, TRUE rows x1 x2 least one NA removed first.","code":""},{"path":"/reference/pairDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"Matrix nrow(x1) rows nrow(x2) columns. Values distance row x1 row x2.","code":""},{"path":[]},{"path":"/reference/pairDist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"","code":"x1 <- data.frame(x=sample(1:30, 30), y=sort(round(100 * rnorm(30))), z=sample(1:30, 30)) x2 <- data.frame(x=1:20, y=round(100 * rnorm(20)), z=sample(1:20, 20)) pairDist(x1, x2) #>            [,1]       [,2]      [,3]      [,4]     [,5]       [,6]      [,7] #>  [1,] 212.84736 354.104504 144.27751 125.35549 573.4649 207.089353 279.14512 #>  [2,] 122.51531 262.769861  55.44367  40.57093 481.6368 116.112015 187.64328 #>  [3,]  68.60758 204.570281  25.67100  43.50862 423.2033  59.874870 129.78829 #>  [4,]  40.79216 182.466435  30.33150  49.61854 401.0511  37.121422 107.39646 #>  [5,]  44.66542 169.755707  52.41183  74.91996 387.8208  33.120990  95.85927 #>  [6,]  16.15549 144.086779  66.27971  89.76079 363.6193   6.403124  69.53416 #>  [7,]  28.44293 133.195345  79.98125 103.58089 352.2087  20.615528  59.15235 #>  [8,]  16.40122 131.768737  80.03124 100.72239 350.1614  20.124612  56.75385 #>  [9,]  30.56141 130.499042  83.29466 106.57392 349.2506  23.958297  56.60389 #> [10,]  26.94439 124.987999  89.45390 109.25200 342.3419  31.112698  50.93133 #> [11,]  32.95451 113.815640  97.78548 119.22248 332.3673  35.524639  38.88444 #> [12,]  49.61854 107.368524 109.13295 131.27833 324.5643  48.559242  36.68787 #> [13,]  52.09607  90.818500 120.50726 141.08862 309.0275  58.497863  18.27567 #> [14,]  56.32051  87.669835 125.04399 145.03103 305.0279  63.796552  19.54482 #> [15,]  71.40728  71.700767 139.26593 160.30284 290.1258  76.557168   7.28011 #> [16,]  80.56674  64.163853 147.41438 168.96449 282.4907  84.433406  13.89244 #> [17,]  88.85944  59.143892 155.04838 176.55028 275.8732  92.249661  23.62202 #> [18,]  98.80283  47.853944 165.69249 187.05080 264.6394 102.781321  31.96873 #> [19,] 101.13852  51.487863 166.74831 188.27905 265.4600 104.139330  36.18011 #> [20,] 102.78619  47.675990 169.35466 190.43372 261.9217 106.700515  37.24245 #> [21,] 116.94871  26.476405 184.06792 205.98301 245.7377 121.016528  49.26459 #> [22,] 125.57070  30.364453 191.31126 213.44320 240.9772 128.382242  58.32667 #> [23,] 133.40915  18.920888 201.57877 222.13059 228.0877 138.902844  67.20119 #> [24,] 149.06710   9.949874 217.08293 238.21209 212.2004 154.236831  82.24962 #> [25,] 155.13220  20.832667 223.51286 244.00410 206.0000 160.903698  89.12912 #> [26,] 175.41665  35.000000 243.21801 264.35015 186.4001 180.235956 108.18965 #> [27,] 177.23149  37.269290 245.26516 266.15973 184.1657 182.375985 110.33132 #> [28,] 203.71794  64.257295 270.89666 292.25160 161.0497 207.872557 136.20940 #> [29,] 213.63754  74.101282 281.69665 302.28629 148.4891 218.862971 146.91834 #> [30,] 226.24102  86.423376 293.19789 314.69827 140.5169 230.171675 158.64741 #>            [,8]      [,9]     [,10]      [,11]      [,12]     [,13]     [,14] #>  [1,] 313.23154 201.72754 301.18101 286.872794 227.321358 256.56968 246.91092 #>  [2,] 221.55361 110.42645 209.40392 195.053839 135.502767 164.61470 154.93547 #>  [3,] 163.51453  55.79426 151.25145 137.764291  78.204859 107.15876  98.03061 #>  [4,] 141.13114  29.01724 129.25169 114.087686  55.524769  84.11896  74.19569 #>  [5,] 129.03100  33.48134 116.70904 104.359954  46.690470  74.10128  66.04544 #>  [6,] 103.65809  18.84144  91.70060  79.101201  21.679483  49.32545  42.00000 #>  [7,]  92.74158  30.51229  80.45496  69.260378  16.309506  39.56008  34.00000 #>  [8,]  90.22749  22.38303  78.28793  63.316664   6.480741  33.00000  23.36664 #>  [9,]  89.94443  32.80244  77.62731  66.407831  15.779734  36.85105  31.54362 #> [10,]  83.25863  32.09361  71.41428  55.767374  12.688578  26.26785  16.15549 #> [11,]  72.34639  40.89010  60.21628  46.497312  14.317821  15.93738  10.34408 #> [12,]  67.00746  54.93633  54.82700  45.011110  29.748950  22.04541  23.93742 #> [13,]  49.65884  63.22974  38.54867  23.280893  38.691084  12.40967  20.61553 #> [14,]  47.09565  67.83804  36.95944  20.688161  44.395946  18.76166  25.86503 #> [15,]  30.14963  82.03048  18.78829   8.185353  56.284989  27.47726  37.81534 #> [16,]  23.00000  90.49309  10.81665  14.247807  64.062470  35.70714  46.32494 #> [17,]  20.24846  98.15294  11.57584  20.976177  71.630999  43.49713  53.82379 #> [18,]  10.95445 108.60018  11.31371  26.870058  82.225300  53.57238  63.91400 #> [19,]  20.32240 110.04090  19.20937  32.264532  83.510478  55.72253  65.83312 #> [20,]  16.03122 112.12047  17.91647  30.740852  85.848704  57.21014  67.23095 #> [21,]  17.11724 127.69886  27.94638  45.967380 101.419919  73.32803  83.92854 #> [22,]  29.35984 135.07776  37.44329  54.990908 108.346666  80.67218  91.15372 #> [23,]  33.37664 144.06943  45.36518  59.008474 118.427193  89.16277  99.05049 #> [24,]  48.30114 160.14056  60.53924  75.848533 134.335401 105.49408 115.68059 #> [25,]  55.19058 166.15655  67.45369  81.228074 140.687597 111.50785 121.37133 #> [26,]  74.11478 186.06719  86.07555 101.405128 160.012500 131.03816 141.18782 #> [27,]  76.19055 188.00266  88.27797 103.126136 162.123410 133.03759 143.08739 #> [28,] 102.54267 213.83405 114.03070 129.634100 187.494000 158.71043 168.86089 #> [29,] 112.80514 224.19857 124.77580 139.129436 198.368344 169.15378 179.03631 #> [30,] 125.10396 236.26468 136.51007 152.266214 209.842798 181.17671 191.34785 #>           [,15]      [,16]     [,17]     [,18]     [,19]      [,20] #>  [1,] 462.54621 175.789647 139.44892 253.57247 280.90034 293.671585 #>  [2,] 370.41193  83.701852  47.26521 161.24826 188.54442 201.258540 #>  [3,] 311.97115  30.016662  16.15549 103.26665 130.72873 143.024473 #>  [4,] 290.07758   8.602325  36.35932  81.65170 108.46658 121.536003 #>  [5,] 276.63333  26.476405  50.72475  69.45502  96.67471 108.332821 #>  [6,] 253.04940  39.560081  72.62920  47.18050  74.01351  85.918566 #>  [7,] 241.30064  50.328918  83.49251  35.41186  62.46599  73.607065 #>  [8,] 239.06066  48.135226  84.81156  30.56141  57.39338  70.356236 #>  [9,] 238.24567  52.896125  86.39444  32.26453  59.23681  70.349129 #> [10,] 231.05627  56.462377  93.26307  23.17326  49.02040  62.201286 #> [11,] 221.22613  66.075714 102.19589  12.52996  40.01250  52.392748 #> [12,] 213.33776  77.058419 111.61541  15.90597  36.12478  45.923850 #> [13,] 198.31541  89.944427 126.45157  18.78829  21.93171  33.361655 #> [14,] 194.52763  94.731199 131.36971  25.19921  22.20360  32.664966 #> [15,] 179.23727 108.300508 144.62711  31.68596  12.08305  15.620499 #> [16,] 171.42345 116.124933 152.08221  38.41875  15.68439   8.717798 #> [17,] 164.62381 123.247718 159.07860  45.37621  21.18962   8.660254 #> [18,] 153.42425 134.074606 170.07645  56.08030  30.38092  16.881943 #> [19,] 154.20117 134.688530 170.29680  57.14893  32.77194  19.646883 #> [20,] 150.53903 137.247951 173.28301  59.31273  33.13608  19.646883 #> [21,] 135.37356 153.652205 189.32248  76.48529  51.94228  39.268308 #> [22,] 130.29582 159.956244 195.21783  82.52878  58.07753  44.485953 #> [23,] 117.06836 170.217508 206.70752  92.61209  65.52099  53.113087 #> [24,] 101.95097 186.453748 222.62300 109.04128  82.71638  70.099929 #> [25,]  95.54580 192.525323 229.02402 115.17378  88.20998  75.927597 #> [26,]  75.48510 212.040091 248.17937 134.13426 107.39646  94.361009 #> [27,]  73.28028 214.105114 250.38570 136.29380 109.38921  96.540147 #> [28,]  50.99020 239.271812 275.12361 161.26376 134.66997 121.367211 #> [29,]  37.06751 250.129966 286.50480 172.23821 145.04482 132.219514 #> [30,]  34.58323 261.554966 297.24905 183.60283 157.13688 143.784561 pairDist(x1) #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]       [,7] #>  [1,]   0.00000  93.34881 152.19396 172.95086 188.47546 210.06904 222.218361 #>  [2,]  93.34881   0.00000  59.43904  82.08532  95.85927 119.72051 130.449224 #>  [3,] 152.19396  59.43904   0.00000  33.03029  36.44173  63.76519  71.763500 #>  [4,] 172.95086  82.08532  33.03029   0.00000  34.56877  41.82105  55.072679 #>  [5,] 188.47546  95.85927  36.44173  34.56877   0.00000  36.90528  37.709415 #>  [6,] 210.06904 119.72051  63.76519  41.82105  36.90528   0.00000  19.390719 #>  [7,] 222.21836 130.44922  71.76350  55.07268  37.70942  19.39072   0.000000 #>  [8,] 223.65375 131.76874  75.11325  51.19570  45.01111  22.04541  20.248457 #>  [9,] 225.33974 133.27415  74.35725  57.87918  39.61060  23.21637   4.358899 #> [10,] 232.22834 139.82131  82.92768  60.04998  51.58488  33.00000  25.942244 #> [11,] 241.38351 149.28496  91.46037  69.61322  58.28379  34.79943  24.228083 #> [12,] 250.88244 158.16447  99.04040  82.06095  63.31666  47.71792  30.870698 #> [13,] 264.69983 173.50504 116.84605  92.14120  84.74078  56.64804  49.365980 #> [14,] 269.13937 178.26385 122.22520  96.51943  90.79097  62.04031  55.901699 #> [15,] 283.39901 191.77330 134.17898 111.04504 100.49876  74.39086  64.389440 #> [16,] 291.22328 199.20090 140.86873 119.44455 106.15084  82.18272  70.242437 #> [17,] 298.43592 206.02427 147.36010 126.96456 112.12047  90.22749  77.103826 #> [18,] 309.35740 217.09445 158.58436 137.52818 123.50304 100.60318  88.141931 #> [19,] 309.70470 217.05990 158.15815 138.69751 122.53163 102.18610  88.260977 #> [20,] 312.69314 220.12042 161.53637 140.92906 126.29331 104.82366  91.760558 #> [21,] 328.02591 236.54386 178.19652 156.65567 143.31085 118.08472 106.770783 #> [22,] 334.38900 242.10328 183.02732 163.82918 147.19715 125.82925 112.236358 #> [23,] 345.66168 253.74397 195.81879 173.03757 161.24826 136.62723 125.614490 #> [24,] 361.29351 269.82031 211.78763 189.13752 177.10449 151.47937 140.762211 #> [25,] 367.72544 276.11230 218.34148 195.10510 183.87224 158.42664 147.901995 #> [26,] 387.25056 295.27784 236.82905 215.07906 201.61349 177.62320 165.921668 #> [27,] 389.38285 297.48445 239.21538 217.00461 204.17639 179.80545 168.422089 #> [28,] 414.45024 322.02019 263.12355 242.77768 227.37194 205.35335 192.525323 #> [29,] 425.68650 333.47114 275.11089 253.15805 239.87914 216.44861 204.660695 #> [30,] 436.56500 344.07703 285.04386 265.18107 249.13049 227.60931 214.508741 #>            [,8]       [,9]     [,10]     [,11]     [,12]      [,13]      [,14] #>  [1,] 223.65375 225.339743 232.22834 241.38351 250.88244 264.699830 269.139369 #>  [2,] 131.76874 133.274154 139.82131 149.28496 158.16447 173.505043 178.263849 #>  [3,]  75.11325  74.357246  82.92768  91.46037  99.04040 116.846053 122.225202 #>  [4,]  51.19570  57.879185  60.04998  69.61322  82.06095  92.141196  96.519428 #>  [5,]  45.01111  39.610605  51.58488  58.28379  63.31666  84.740781  90.790969 #>  [6,]  22.04541  23.216374  33.00000  34.79943  47.71792  56.648036  62.040309 #>  [7,]  20.24846   4.358899  25.94224  24.22808  30.87070  49.365980  55.901699 #>  [8,]   0.00000  20.024984  11.35782  18.78829  34.33657  42.083251  47.254629 #>  [9,]  20.02498   0.000000  23.79075  21.63331  26.87006  47.222876  53.870214 #> [10,]  11.35782  23.790755   0.00000  14.35270  28.03569  36.687873  41.785165 #> [11,]  18.78829  21.633308  14.35270   0.00000  18.70829  26.720778  33.075671 #> [12,]  34.33657  26.870058  28.03569  18.70829   0.00000  33.105891  39.774364 #> [13,]  42.08325  47.222876  36.68787  26.72078  33.10589   0.000000   7.071068 #> [14,]  47.25463  53.870214  41.78516  33.07567  39.77436   7.071068   0.000000 #> [15,]  60.21628  61.717096  53.60037  42.76681  41.04875  19.824228  18.841444 #> [16,]  68.36666  67.268120  61.29437  50.04998  44.05678  30.479501  30.380915 #> [17,]  75.84853  73.851202  68.07349  57.39338  49.01020  39.572718  39.446166 #> [18,]  86.35392  85.005882  78.66384  68.07349  60.51446  47.979162  46.540305 #> [19,]  87.70405  84.858706  79.55501  69.23150  59.21993  52.182373  51.778374 #> [20,]  89.76636  88.425110  81.49233  71.57514  63.09517  52.469038  51.078371 #> [21,] 105.91506 104.052871  99.30257  87.74395  81.09871  65.764732  63.442888 #> [22,] 112.89376 109.077954 105.36603  94.24436  84.20214  75.511589  74.269779 #> [23,] 122.11879 122.637678 114.35908 104.55620  98.55963  81.326502  77.704569 #> [24,] 138.37630 137.989130 131.24405 120.63582 114.52074  97.133928  93.557469 #> [25,] 144.39183 145.037926 136.85759 126.96456 121.25180 103.082491  99.085821 #> [26,] 164.03048 162.938639 156.36176 146.04451 138.45216 123.405835 120.012499 #> [27,] 166.03012 165.459965 158.34456 148.20594 141.07090 125.159898 121.536003 #> [28,] 191.58810 189.359447 183.52929 173.33494 164.13714 151.937487 148.932871 #> [29,] 202.12867 201.566366 194.03350 184.33936 176.59841 161.551849 157.825853 #> [30,] 213.99533 211.322029 205.90046 195.66553 186.01344 174.542258 171.607109 #>           [,15]      [,16]      [,17]      [,18]      [,19]      [,20] #>  [1,] 283.39901 291.223282 298.435923 309.357398 309.704698 312.693140 #>  [2,] 191.77330 199.200904 206.024270 217.094449 217.059900 220.120422 #>  [3,] 134.17898 140.868733 147.360103 158.584362 158.158149 161.536374 #>  [4,] 111.04504 119.444548 126.964562 137.528179 138.697513 140.929060 #>  [5,] 100.49876 106.150836 112.120471 123.503036 122.531629 126.293309 #>  [6,]  74.39086  82.182723  90.227490 100.603181 102.186105 104.823661 #>  [7,]  64.38944  70.242437  77.103826  88.141931  88.260977  91.760558 #>  [8,]  60.21628  68.366659  75.848533  86.353923  87.704048  89.766363 #>  [9,]  61.71710  67.268120  73.851202  85.005882  84.858706  88.425110 #> [10,]  53.60037  61.294372  68.073490  78.663842  79.555012  81.492331 #> [11,]  42.76681  50.049975  57.393379  68.073490  69.231496  71.575135 #> [12,]  41.04875  44.056782  49.010203  60.514461  59.219929  63.095166 #> [13,]  19.82423  30.479501  39.572718  47.979162  52.182373  52.469038 #> [14,]  18.84144  30.380915  39.446166  46.540305  51.778374  51.078371 #> [15,]   0.00000  11.661904  21.047565  28.301943  33.436507  33.256578 #> [16,]  11.66190   0.000000   9.949874  18.466185  22.405357  23.452079 #> [17,]  21.04757   9.949874   0.000000  11.575837  12.688578  14.866069 #> [18,]  28.30194  18.466185  11.575837   0.000000   9.848858   7.000000 #> [19,]  33.43651  22.405357  12.688578   9.848858   0.000000   7.348469 #> [20,]  33.25658  23.452079  14.866069   7.000000   7.348469   0.000000 #> [21,]  46.36809  38.183766  33.778692  23.259407  28.390139  25.377155 #> [22,]  55.81219  45.287967  37.416574  28.178006  26.551836  26.095977 #> [23,]  62.36185  55.398556  49.779514  38.288379  42.154478  36.592349 #> [24,]  78.16649  71.035203  65.795137  54.267854  57.827329  53.347915 #> [25,]  84.43341  77.801028  72.401657  60.844063  64.319515  59.219929 #> [26,] 104.09611  96.104110  89.593527  78.287930  79.737068  75.960516 #> [27,] 106.03773  98.407317  92.103203  80.703160  82.522724  78.421936 #> [28,] 132.34047 123.507085 116.073253 105.275828 105.023807 102.127371 #> [29,] 142.45701 134.662541 127.831921 116.623325 117.524466 113.657380 #> [30,] 154.89997 145.897224 138.322088 127.667537 127.051171 124.426685 #>           [,21]     [,22]     [,23]     [,24]     [,25]      [,26]      [,27] #>  [1,] 328.02591 334.38900 345.66168 361.29351 367.72544 387.250565 389.382845 #>  [2,] 236.54386 242.10328 253.74397 269.82031 276.11230 295.277835 297.484453 #>  [3,] 178.19652 183.02732 195.81879 211.78763 218.34148 236.829052 239.215384 #>  [4,] 156.65567 163.82918 173.03757 189.13752 195.10510 215.079055 217.004608 #>  [5,] 143.31085 147.19715 161.24826 177.10449 183.87224 201.613492 204.176394 #>  [6,] 118.08472 125.82925 136.62723 151.47937 158.42664 177.623197 179.805450 #>  [7,] 106.77078 112.23636 125.61449 140.76221 147.90199 165.921668 168.422089 #>  [8,] 105.91506 112.89376 122.11879 138.37630 144.39183 164.030485 166.030118 #>  [9,] 104.05287 109.07795 122.63768 137.98913 145.03793 162.938639 165.459965 #> [10,]  99.30257 105.36603 114.35908 131.24405 136.85759 156.361760 158.344561 #> [11,]  87.74395  94.24436 104.55620 120.63582 126.96456 146.044514 148.205938 #> [12,]  81.09871  84.20214  98.55963 114.52074 121.25180 138.452158 141.070904 #> [13,]  65.76473  75.51159  81.32650  97.13393 103.08249 123.405835 125.159898 #> [14,]  63.44289  74.26978  77.70457  93.55747  99.08582 120.012499 121.536003 #> [15,]  46.36809  55.81219  62.36185  78.16649  84.43341 104.096109 106.037729 #> [16,]  38.18377  45.28797  55.39856  71.03520  77.80103  96.104110  98.407317 #> [17,]  33.77869  37.41657  49.77951  65.79514  72.40166  89.593527  92.103203 #> [18,]  23.25941  28.17801  38.28838  54.26785  60.84406  78.287930  80.703160 #> [19,]  28.39014  26.55184  42.15448  57.82733  64.31951  79.737068  82.522724 #> [20,]  25.37716  26.09598  36.59235  53.34791  59.21993  75.960516  78.421936 #> [21,]   0.00000  19.00000  24.55606  34.61214  43.39355  59.983331  62.498000 #> [22,]  19.00000   0.00000  28.17801  37.21559  45.14421  56.169387  59.623821 #> [23,]  24.55606  28.17801   0.00000  19.20937  22.89105  42.766810  44.192760 #> [24,]  34.61214  37.21559  19.20937   0.00000  11.00000  27.531800  29.017236 #> [25,]  43.39355  45.14421  22.89105  11.00000   0.00000  23.430749  23.345235 #> [26,]  59.98333  56.16939  42.76681  27.53180  23.43075   0.000000   4.898979 #> [27,]  62.49800  59.62382  44.19276  29.01724  23.34524   4.898979   0.000000 #> [28,]  88.12491  80.52950  71.78440  57.81003  53.52569  30.561414  30.822070 #> [29,]  99.26732  94.30270  80.23092  66.00000  59.23681  39.370039  37.013511 #> [30,] 110.42645 102.29858  94.49339  80.13738  75.74299  52.820451  52.592775 #>           [,28]     [,29]     [,30] #>  [1,] 414.45024 425.68650 436.56500 #>  [2,] 322.02019 333.47114 344.07703 #>  [3,] 263.12355 275.11089 285.04386 #>  [4,] 242.77768 253.15805 265.18107 #>  [5,] 227.37194 239.87914 249.13049 #>  [6,] 205.35335 216.44861 227.60931 #>  [7,] 192.52532 204.66069 214.50874 #>  [8,] 191.58810 202.12867 213.99533 #>  [9,] 189.35945 201.56637 211.32203 #> [10,] 183.52929 194.03350 205.90046 #> [11,] 173.33494 184.33936 195.66553 #> [12,] 164.13714 176.59841 186.01344 #> [13,] 151.93749 161.55185 174.54226 #> [14,] 148.93287 157.82585 171.60711 #> [15,] 132.34047 142.45701 154.89997 #> [16,] 123.50708 134.66254 145.89722 #> [17,] 116.07325 127.83192 138.32209 #> [18,] 105.27583 116.62333 127.66754 #> [19,] 105.02381 117.52447 127.05117 #> [20,] 102.12737 113.65738 124.42669 #> [21,]  88.12491  99.26732 110.42645 #> [22,]  80.52950  94.30270 102.29858 #> [23,]  71.78440  80.23092  94.49339 #> [24,]  57.81003  66.00000  80.13738 #> [25,]  53.52569  59.23681  75.74299 #> [26,]  30.56141  39.37004  52.82045 #> [27,]  30.82207  37.01351  52.59278 #> [28,]   0.00000  20.24846  22.71563 #> [29,]  20.24846   0.00000  25.01999 #> [30,]  22.71563  25.01999   0.00000"},{"path":"/reference/prefix.html","id":null,"dir":"Reference","previous_headings":"","what":"Add leading characters to a string — prefix","title":"Add leading characters to a string — prefix","text":"Add leading characters string. function useful ensuring, say, files get sorted particular order. example, operating systems file name \"file 1\" come first, \"file 10\", \"file 11\", \"file 12\", etc., \"file 2\", \"file 21\", . Using prefix, can add one leading zeros file names \"file 01\", \"file 02\", \"file 03\", ... sort way.","code":""},{"path":"/reference/prefix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add leading characters to a string — prefix","text":"","code":"prefix(x, len, pad = \"0\")"},{"path":"/reference/prefix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add leading characters to a string — prefix","text":"x Character character list add prefix. len total number characters desired string. string already length longer nothing prefixed string. pad Character. Symbol prefix string.","code":""},{"path":"/reference/prefix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add leading characters to a string — prefix","text":"Character character vector.","code":""},{"path":"/reference/prefix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add leading characters to a string — prefix","text":"","code":"prefix(1:5, len=2) #> [1] \"01\" \"02\" \"03\" \"04\" \"05\" prefix(1:5, len=5) #> [1] \"00001\" \"00002\" \"00003\" \"00004\" \"00005\" prefix(1:5, len=3, pad='!') #> [1] \"!!1\" \"!!2\" \"!!3\" \"!!4\" \"!!5\""},{"path":"/reference/quadArea.html","id":null,"dir":"Reference","previous_headings":"","what":"Area of a quadrilateral — quadArea","title":"Area of a quadrilateral — quadArea","text":"Calculates area quadrilateral dividing two triangles applying Heron's formula.","code":""},{"path":"/reference/quadArea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Area of a quadrilateral — quadArea","text":"","code":"quadArea(x, y)"},{"path":"/reference/quadArea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Area of a quadrilateral — quadArea","text":"x Numeric list. x coordinates quadrilateral. y Numeric list. y coordinates quadrilateral.","code":""},{"path":"/reference/quadArea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Area of a quadrilateral — quadArea","text":"Numeric (area quadrilateral units x y.","code":""},{"path":"/reference/quadArea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Area of a quadrilateral — quadArea","text":"","code":"x <- c(0, 6, 4, 1) y <- c(0, 1, 7, 4) quadArea(x, y) #> [1] 21.24036 plot(1, type='n', xlim=c(0, 7), ylim=c(0, 7), xlab='x', ylab='y') polygon(x, y) text(x, y, LETTERS[1:4], pos=4) lines(x[c(1, 3)], y[c(1, 3)], lty='dashed', col='red')"},{"path":"/reference/renumSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Renumber a sequence of numbers — renumSeq","title":"Renumber a sequence of numbers — renumSeq","text":"function renumbers sequence, helpful \"gaps\" appear sequence. example, consider sequence {1, 1, 3, 1, 8, 8, 8}. function renumber sequence {1, 1, 2, 1, 3, 3, 3}. NAs ignored.","code":""},{"path":"/reference/renumSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Renumber a sequence of numbers — renumSeq","text":"","code":"renumSeq(x)"},{"path":"/reference/renumSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Renumber a sequence of numbers — renumSeq","text":"x Vector numerical character values.","code":""},{"path":"/reference/renumSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Renumber a sequence of numbers — renumSeq","text":"vector.","code":""},{"path":[]},{"path":"/reference/renumSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Renumber a sequence of numbers — renumSeq","text":"","code":"x <- c(1, 1, 3, 1, 8, 8, 8) renumSeq(x) #> [1] 1 1 2 1 3 3 3  x <- c(1, 1, 3, 1, 8, NA, 8, 8) renumSeq(x) #> [1]  1  1  2  1  3 NA  3  3  y <- c('c', 'c', 'b', 'a', 'w', 'a') renumSeq(y) #> [1] 3 3 2 1 4 1"},{"path":"/reference/rotateMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate values in a matrix — rotateMatrix","title":"Rotate values in a matrix — rotateMatrix","text":"function rotates values matrix user-specified number degrees. almost cases values fall outside matrix discarded.  Cells rotated values become NA. square matrices can accommodated. cases rotation cause cells assigned value original values fall within . instances mean value surrounding cells assigned cells missing values. angle rotation small rotation occur.","code":""},{"path":"/reference/rotateMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate values in a matrix — rotateMatrix","text":"","code":"rotateMatrix(x, rot)"},{"path":"/reference/rotateMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate values in a matrix — rotateMatrix","text":"x Object class matrix. rot Numeric. Number degrees rotate matrix. Values represent difference degrees \"north\" () clockwise direction.","code":""},{"path":"/reference/rotateMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate values in a matrix — rotateMatrix","text":"matrix.","code":""},{"path":[]},{"path":"/reference/rotateMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotate values in a matrix — rotateMatrix","text":"","code":"x <- matrix(1:100, nrow=10) x #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1   11   21   31   41   51   61   71   81    91 #>  [2,]    2   12   22   32   42   52   62   72   82    92 #>  [3,]    3   13   23   33   43   53   63   73   83    93 #>  [4,]    4   14   24   34   44   54   64   74   84    94 #>  [5,]    5   15   25   35   45   55   65   75   85    95 #>  [6,]    6   16   26   36   46   56   66   76   86    96 #>  [7,]    7   17   27   37   47   57   67   77   87    97 #>  [8,]    8   18   28   38   48   58   68   78   88    98 #>  [9,]    9   19   29   39   49   59   69   79   89    99 #> [10,]   10   20   30   40   50   60   70   80   90   100 rotateMatrix(x, 90) # 90 degrees to the right #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   10    9    8    7    6    5    4    3    2     1 #>  [2,]   20   19   18   17   16   15   14   13   12    11 #>  [3,]   30   29   28   27   26   25   24   23   22    21 #>  [4,]   40   39   38   37   36   35   34   33   32    31 #>  [5,]   50   49   48   47   46   45   44   43   42    41 #>  [6,]   60   59   58   57   56   55   54   53   52    51 #>  [7,]   70   69   68   67   66   65   64   63   62    61 #>  [8,]   80   79   78   77   76   75   74   73   72    71 #>  [9,]   90   89   88   87   86   85   84   83   82    81 #> [10,]  100   99   98   97   96   95   94   93   92    91 rotateMatrix(x, 180) # 180 degrees to the right #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]  100   90   80   70   60   50   40   30   20    10 #>  [2,]   99   89   79   69   59   49   39   29   19     9 #>  [3,]   98   88   78   68   58   48   38   28   18     8 #>  [4,]   97   87   77   67   57   47   37   27   17     7 #>  [5,]   96   86   76   66   56   46   36   26   16     6 #>  [6,]   95   85   75   65   55   45   35   25   15     5 #>  [7,]   94   84   74   64   54   44   34   24   14     4 #>  [8,]   93   83   73   63   53   43   33   23   13     3 #>  [9,]   92   82   72   62   52   42   32   22   12     2 #> [10,]   91   81   71   61   51   41   31   21   11     1 rotateMatrix(x, 45) # 45 degrees to the right #>       [,1] [,2] [,3]   [,4]     [,5]   [,6]   [,7] [,8]   [,9] [,10] #>  [1,]   NA   NA    4  3.000 13.00000 22.000 21.000   31     NA    NA #>  [2,]   NA  7.6    5 14.000 19.75000 23.000 32.000   41 47.200    NA #>  [3,]    7  6.0   16 25.000 24.00000 34.000 43.000   52 51.000    61 #>  [4,]    8 17.0   26 27.000 35.00000 44.000 48.500   53 62.000    71 #>  [5,]   19 24.0   27 36.000 44.14286 45.000 54.000   63 68.875    72 #>  [6,]   29 28.0   38 47.000 46.00000 56.000 65.000   74 73.000    83 #>  [7,]   30 39.0   48 52.625 57.00000 66.000 71.875   75 84.000    93 #>  [8,]   40 50.0   59 58.000 68.00000 77.000 76.000   86 95.000    94 #>  [9,]   NA 55.8   60 69.000 78.00000 82.625 87.000   96 93.600    NA #> [10,]   NA   NA   70 80.000 89.00000 88.000 98.000   97     NA    NA rotateMatrix(x, 7) # slight rotation #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    2   NA   11   21   31   41   51   61   71    81 #>  [2,]    3   12   22   32   42   52   62   72   82    NA #>  [3,]    4   13   23   33   43   53   63   73   83    92 #>  [4,]    5   14   24   34   44   54   64   74   84    93 #>  [5,]    6   15   25   35   45   55   65   75   85    94 #>  [6,]    7   16   26   36   46   56   66   76   86    95 #>  [7,]    8   17   27   37   47   57   67   77   87    96 #>  [8,]    9   18   28   38   48   58   68   78   88    97 #>  [9,]   NA   19   29   39   49   59   69   79   89    98 #> [10,]   20   30   40   50   60   70   80   90   NA    99 rotateMatrix(x, 5) # no rotation because angle is too small #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1   11   21   31   41   51   61   71   81    91 #>  [2,]    2   12   22   32   42   52   62   72   82    92 #>  [3,]    3   13   23   33   43   53   63   73   83    93 #>  [4,]    4   14   24   34   44   54   64   74   84    94 #>  [5,]    5   15   25   35   45   55   65   75   85    95 #>  [6,]    6   16   26   36   46   56   66   76   86    96 #>  [7,]    7   17   27   37   47   57   67   77   87    97 #>  [8,]    8   18   28   38   48   58   68   78   88    98 #>  [9,]    9   19   29   39   49   59   69   79   89    99 #> [10,]   10   20   30   40   50   60   70   80   90   100"},{"path":"/reference/roundTo.html","id":null,"dir":"Reference","previous_headings":"","what":"Round to nearest target value — roundTo","title":"Round to nearest target value — roundTo","text":"function rounds value nearest \"target\" value (e.g., round 0.72 nearest 0.25, 0.75).","code":""},{"path":"/reference/roundTo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round to nearest target value — roundTo","text":"","code":"roundTo(x, target, roundFx = round)"},{"path":"/reference/roundTo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round to nearest target value — roundTo","text":"x Numeric. target Numeric. roundFx round, floor, ceiling.","code":""},{"path":"/reference/roundTo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round to nearest target value — roundTo","text":"Numeric.","code":""},{"path":"/reference/roundTo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round to nearest target value — roundTo","text":"","code":"roundTo(0.73, 0.05) #> [1] 0.75 roundTo(0.73, 0.1) #> [1] 0.7 roundTo(0.73, 0.25) #> [1] 0.75 roundTo(0.73, 0.25, floor) #> [1] 0.5 roundTo(0.73, 1) #> [1] 1 roundTo(0.73, 10) #> [1] 0 roundTo(0.73, 10, ceiling) #> [1] 10"},{"path":"/reference/roundedSigDigits.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of significant digits in rounded numbers — roundedSigDigits","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"function \"examines\" numeric value (typically numbers decimal place) estimates either: number significant digits numerator denominator fraction (approximately) result given value. number digits integer may rounded, depending whether input values decimal place integer. Negative values treated positive values negative number returns value positive version. See Details details. Obviously, values can appear rounded repeating even !","code":""},{"path":"/reference/roundedSigDigits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"","code":"roundedSigDigits(x, minReps = 3)"},{"path":"/reference/roundedSigDigits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"x Numeric numeric vector. minReps Integer. Number times digit sequence digits occur decimal place needs repeated assume represents repeating series thus assumed arise using decimal places represent fraction. Default 3. example, minReps 3 0.111 assumed represent repeating value 1 occurs three times, -1 returned. However, minReps 4 function assume value four digits, next digit 1, returns -3 three values decimal place. penultimate digit >5 last digit equal penultimate digit plus 1, last digit counts repeat penultimate digit.  0.067 assumed two repeating 6s.  minReps 0 1 function (usually) return negative total number decimal places value.","code":""},{"path":"/reference/roundedSigDigits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"Integer (number digits) NA (appear rounded).","code":""},{"path":"/reference/roundedSigDigits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"values least one non-zero digit decimal place repeated series digits detected, function simply returns total number digits (ignoring trailing zeros) times -1. example: 0.3 returns -1 just one value decimal. 0.34567 returns -5 repeats 5th decimal place. 0.1212125 returns -7 repeats (starting right) 7th decimal place. 0.111117 returns -6 repeats (starting right) 7th decimal place. function takes account rounding : 0.666 might truncated version 2/3. Two three 1 significant digit, function returns -1 (1 value decimal place). 0.667 also returns -1 might represent rounding 2/3 customary round digits next digit >5. 0.3334 returns -4 inappropriate round 3 4 next digit 5 less. Repeating series accounted . example: 0.121212 returns -2 \"12\" starts repeating second decimal place. 0.000678678678 returns -6 \"678\" starts repeating 6th place. 0.678678678 returns -3. 0.678678679 also returns -3 678 rounded 679 next digit 6. Note can set minimum number times digit series needs repeated count repeated using argument minReps. default 3, digits series digits need repeated least 3 times count repetition, can changed: 0.1111 returns -1 using default requirement 3 repetitions -4 number minimum repetitions 5 . 0.121212 returns -2 using default requirement 3 repetitions -6 number minimum repetitions 4 . Trailing zeros ignored, 0.12300 returns -3. values digits decimal place location first non-zero digit right returned positive integer. example: 234 returns 1 first non-zero digit right 1s place. 100 return 3 first non-zero digit right 100s place. 70001 returns 1 first non-zero digit right 1s place. However, note oddities: 4E5 returns 6 4E50 probably return 51 many computers hard time internally representing numbers large. 4E-5 returns -5  probably return -50 many computers hard time internally representing numbers small. -100 100 return 3 -0.12 0.12 return -2 negative sign ignored. 0 returns 0. NA NaN returns NA.","code":""},{"path":"/reference/roundedSigDigits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"","code":"roundedSigDigits(0.3) #> [1] -1 roundedSigDigits(0.34567) #> [1] -5 roundedSigDigits(0.1212125) #> [1] -7 roundedSigDigits(0.111117) #> [1] -6 roundedSigDigits(0.666) #> [1] -1 roundedSigDigits(0.667) #> [1] -1 roundedSigDigits(0.3334) #> [1] -4 roundedSigDigits(0.121212) #> [1] -2 roundedSigDigits(0.000678678678) #> [1] -6 roundedSigDigits(0.678678678) #> [1] -3 roundedSigDigits(0.678678679) #> [1] -3 roundedSigDigits(0.1111) #> [1] -1 roundedSigDigits(0.1111, minReps=5) #> [1] -4 roundedSigDigits(0.121212) #> [1] -2 roundedSigDigits(0.121212, minReps=4) #> [1] -6 roundedSigDigits(234) #> [1] 1 roundedSigDigits(100) #> [1] 3 roundedSigDigits(70001) #> [1] 1 roundedSigDigits(4E5) #> [1] 1 roundedSigDigits(4E50) #> [1] 2 roundedSigDigits(4E-5) #> [1] 1 roundedSigDigits(4E-50) #> [1] 2 roundedSigDigits(0) #> [1] 0 roundedSigDigits(NA) #> [1] NA  x <- c(0.0667, 0.0667, 0.067) roundedSigDigits(x) #> [1] -2 -2 -3"},{"path":"/reference/rowColIndexing.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between row- and column-style indexing of matrices — rowColIndexing","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"functions converts index values cells row- column-style indexing cells matrices. Column indexing (default matrices) cell \"1\" upper left corner matrix. cell \"2\" , . numbering wraps around top next column. Row indexing (default rasters, example), also cell \"1\" upper left, cell \"2\" right, . Numbering wraps around next row.","code":""},{"path":"/reference/rowColIndexing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"","code":"rowColIndexing(x, cell, dir)"},{"path":"/reference/rowColIndexing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"x Either matrix, vector two values, one number rows one number columns matrix. cell One cell indices (positive integers). dir \"direction\" convert. 'row', assumed cell column-style index converted row-style index. 'col', assumed cell row-style index converted column-style index.","code":""},{"path":"/reference/rowColIndexing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"One positive integers.","code":""},{"path":"/reference/rowColIndexing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"","code":"# column versus row indexing colIndex <- matrix(1:40, nrow=5, ncol=8) rowIndex <- matrix(1:40, nrow=5, ncol=8, byrow=TRUE) colIndex #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    6   11   16   21   26   31   36 #> [2,]    2    7   12   17   22   27   32   37 #> [3,]    3    8   13   18   23   28   33   38 #> [4,]    4    9   14   19   24   29   34   39 #> [5,]    5   10   15   20   25   30   35   40 rowIndex #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    2    3    4    5    6    7    8 #> [2,]    9   10   11   12   13   14   15   16 #> [3,]   17   18   19   20   21   22   23   24 #> [4,]   25   26   27   28   29   30   31   32 #> [5,]   33   34   35   36   37   38   39   40  # examples x <- matrix('a', nrow=5, ncol=8, byrow=TRUE) rowColIndexing(x, cell=c(1, 6, 20), 'row') #> [1]  1  2 36 rowColIndexing(x, cell=c(1, 6, 20), 'col') #> [1]  1 26 18  rowColIndexing(c(5, 8), cell=c(1, 6, 20), 'row') #> [1]  1  2 36 rowColIndexing(c(5, 8), cell=c(1, 6, 20), 'col') #> [1]  1 26 18"},{"path":"/reference/say.html","id":null,"dir":"Reference","previous_headings":"","what":"Nicer version of print() or cat() function — say","title":"Nicer version of print() or cat() function — say","text":"function nicer version print() cat(), especially used inline functions displays immediately pastes strings together. also rudimentary optional word wrapping.","code":""},{"path":"/reference/say.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nicer version of print() or cat() function — say","text":"","code":"say(   ...,   pre = 0,   post = 1,   breaks = NULL,   wiggle = 10,   preBreak = 1,   level = NULL,   deco = \"#\" )"},{"path":"/reference/say.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nicer version of print() or cat() function — say","text":"... character strings print pre Integer >= 0.  Number blank lines print strings post Integer >= 0. Number blank lines print strings breaks Either NULL, causes strings printed line (wrap overflow) positive integer wraps lines character length (e.g., breaks=80 inserts line breaks every 80 characters). wiggle Integer >- 0.  Allows line overrun breaks length characters inserting line breaks. preBreak wrapping long lines indicates subsequent lines indented. NULL causes lines printed starting column 1 display device. positive integer inserts preBreak number spaces printing line. string causes line start string. level Integer NULL. NULL, items ... displayed -. Otherwise, value 1, 2, 3 indicates teh heading level, lower numbers causing decoration spacing used. deco Character. Character decorate text level NULL.","code":""},{"path":"/reference/say.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nicer version of print() or cat() function — say","text":"Nothing (side effect output display device).","code":""},{"path":"/reference/say.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nicer version of print() or cat() function — say","text":"","code":"say('The quick brown fox ', 'jumps over the lazy ', 'Susan.') #>  The quick brown fox jumps over the lazy Susan. say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', breaks=10) #>  The quick  #>  brown fox  #>  jumps over #>   the lazy Susan. say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', level=1) #>  #>  ######################################################  #>  ### The quick brown fox jumps over the lazy Susan. ### #>  ######################################################  #>  say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', level=2) #>  #>     ### The quick brown fox jumps over the lazy Susan. ### #>     ######################################################  #>  say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', level=3) #>  #>        ### The quick brown fox jumps over the lazy Susan.  #>"},{"path":"/reference/stretchMinMax.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale values — stretchMinMax","title":"Rescale values — stretchMinMax","text":"function rescales vector numeric values arbitrary range. Optionally, stretch values equal lowest value can \"nudged\" slightly higher half minimum value across rescaled vector values > 0.","code":""},{"path":"/reference/stretchMinMax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale values — stretchMinMax","text":"","code":"stretchMinMax(   x,   lower = 0,   upper = 1,   nudgeUp = FALSE,   nudgeDown = FALSE,   na.rm = FALSE )"},{"path":"/reference/stretchMinMax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale values — stretchMinMax","text":"x Numeric list. lower Numeric, low end range stretch. upper Numeric, high end range stretch. nudgeUp, nudgeDown Logical, FALSE (default) nothing. TRUE ** rescaling [0, 1], small value added values x equal 0. value equal 0.5 * min(x[x > 0]). na.rm Logical, FALSE (default) values x NA returned value NA. TRUE NA's ignored calculation.","code":""},{"path":"/reference/stretchMinMax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale values — stretchMinMax","text":"Numeric value.","code":""},{"path":[]},{"path":"/reference/stretchMinMax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescale values — stretchMinMax","text":"","code":"x <- 1:10 stretchMinMax(x) #>  [1] 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667 #>  [8] 0.7777778 0.8888889 1.0000000 stretchMinMax(x, lower=2, upper=5) #>  [1] 2.000000 2.333333 2.666667 3.000000 3.333333 3.666667 4.000000 4.333333 #>  [9] 4.666667 5.000000 stretchMinMax(x, nudgeUp=TRUE) #>  [1] 0.05555556 0.11111111 0.22222222 0.33333333 0.44444444 0.55555556 #>  [7] 0.66666667 0.77777778 0.88888889 1.00000000 stretchMinMax(x, lower=2, upper=5, nudgeUp=TRUE) #>  [1] 2.166667 2.333333 2.666667 3.000000 3.333333 3.666667 4.000000 4.333333 #>  [9] 4.666667 5.000000 stretchMinMax(x, nudgeDown=TRUE) #>  [1] 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667 #>  [8] 0.7777778 0.8888889 0.9444444 stretchMinMax(x, lower=2, upper=5, nudgeUp=TRUE, nudgeDown=TRUE) #>  [1] 2.166667 2.333333 2.666667 3.000000 3.333333 3.666667 4.000000 4.333333 #>  [9] 4.666667 4.833333 x <- c(1:5, NA) stretchMinMax(x) #> [1] NA NA NA NA NA NA stretchMinMax(x, na.rm=TRUE) #> [1] 0.00 0.25 0.50 0.75 1.00   NA"},{"path":"/reference/which.pmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Which vector has maximum value at each element — which.pmax","title":"Which vector has maximum value at each element — which.pmax","text":"functions vectorized versions .max .min, return index value maximum minimum (first maximum/minimum value, tie). case, function supplied two vectors length. element position (e.g., first element vector, second element, etc.) function returns integer indicating vector highest lowest value (index first vector highest lowest value case ties).","code":""},{"path":"/reference/which.pmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Which vector has maximum value at each element — which.pmax","text":"","code":"which.pmax(..., na.rm = TRUE)  which.pmin(..., na.rm = TRUE)"},{"path":"/reference/which.pmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Which vector has maximum value at each element — which.pmax","text":"... Two vectors. lengths match, results likely unanticipated. na.rm Logical, FALSE vectors contains NA NaN, function return NA. TRUE (default), NA returned elements position NA NaN.","code":""},{"path":"/reference/which.pmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Which vector has maximum value at each element — which.pmax","text":"Vector length input, numeric values indicating vector highest value position. case ties, index first vector returned.","code":""},{"path":"/reference/which.pmax.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Which vector has maximum value at each element — which.pmax","text":".pmin(): vector minimum value element","code":""},{"path":[]},{"path":"/reference/which.pmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Which vector has maximum value at each element — which.pmax","text":"","code":"set.seed(123) a <- sample(9, 5) b <- sample(9, 5) c <- sample(9, 5) a[2:3] <- NA b[3] <- NA a[6] <- NA b[6] <- NA c[6] <- NA which.pmax(a, b, c) #> [1]  2  2  3  2  1 NA which.pmin(a, b, c) #> [1]  1  2  3  3  2 NA which.pmax(a, b, c, na.rm=FALSE) #> [1]  2 NA NA  2  1 NA which.pmin(a, b, c, na.rm=FALSE) #> [1]  1 NA NA  3  2 NA"},{"path":"/reference/yearFromDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Year from date formats that are possibly ambiguous — yearFromDate","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"function attempts return year characters representing dates formats. formats can ambigous varied within set.  example, returns \"1982\" (9982 century ambigous) \"11/20/82\", \"1982-11-20\", \"Nov. 20, 1982\", \"20 Nov 1982\", \"20-Nov-1982\", \"20/Nov/1982\", \"20 Nov. 82\", \"20 Nov 82\". function handles ambiguous centuries (e.g., 1813, 1913, 2013) including dummy place holder century place (.e., 9913). Note may return warnings like \"NAs introduced coercion\".","code":""},{"path":"/reference/yearFromDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"","code":"yearFromDate(x, yearLast = TRUE)"},{"path":"/reference/yearFromDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"x Character character list, one dates. yearLast Logical, TRUE assume dates like \"XX/YY/ZZ\" list year last (=ZZ).  FALSE, assume first (=XX).","code":""},{"path":"/reference/yearFromDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"Numeric.","code":""},{"path":"/reference/yearFromDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"","code":"yearFromDate(1969, yearLast=TRUE) #> [1] 1969 yearFromDate('10-Jul-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10-Jul-1971', yearLast=TRUE) # --> 1971 #> [1] 1971 yearFromDate('10-19-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10-19-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10-1-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3-22-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3-2-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10-1-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3-22-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3-2-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10/Jul/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10/Jul/1971', yearLast=TRUE) # --> 1971 #> [1] 1971 yearFromDate('10/19/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10/19/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10/1/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3/22/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3/2/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10/1/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3/22/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3/2/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10 mmm 71', yearLast=TRUE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('5 mmm 71', yearLast=TRUE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('10 19 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10 19 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10 1 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3 22 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3 2 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10 1 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3 22 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3 2 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('Oct. 19, 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('19 October 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('How you do dat?', yearLast=TRUE) # --> NA #> [1] NA yearFromDate('2014-07-03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014-07-3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 3', yearLast=TRUE) # --> 2014 #> [1] 2014  yearFromDate(1969, yearLast=FALSE) #> [1] 1969 yearFromDate('10-Jul-71', yearLast=FALSE) # --> 9971 #> [1] 9910 yearFromDate('10-Jul-1971', yearLast=FALSE) # --> 1971 #> [1] 1971 yearFromDate('10-19-71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('10-19-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10-1-71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('3-22-71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('3-2-71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('10-1-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3-22-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3-2-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10/19/71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('10/19/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10/1/71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('3/22/71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('3/2/71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('10/1/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3/22/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3/2/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10 mmm 71', yearLast=FALSE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('5 mmm 71', yearLast=FALSE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('10 19 71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('10 19 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10 1 71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('3 22 71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('3 2 71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('10 1 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3 22 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3 2 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('Oct. 19, 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('19 October 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('How you do dat?', yearLast=FALSE) # --> NA #> [1] NA yearFromDate('2014-07-03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014-07-3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 3', yearLast=FALSE) # --> 2014 #> [1] 2014"},{"path":"/news/index.html","id":"omnibus-113","dir":"Changelog","previous_headings":"","what":"omnibus 1.1.3","title":"omnibus 1.1.3","text":"o Added insert() o Added renumSeq() o Fixed bug insertCol()","code":""},{"path":"/news/index.html","id":"omnibus-112","dir":"Changelog","previous_headings":"","what":"omnibus 1.1.2","title":"omnibus 1.1.2","text":"CRAN release: 2022-02-15 o Removed clear()","code":""},{"path":"/news/index.html","id":"omnibus-111","dir":"Changelog","previous_headings":"","what":"omnibus 1.1.1","title":"omnibus 1.1.1","text":"o Removed () o Cleaned help o First sumbission CRAN","code":""}]
