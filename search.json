[{"path":"/articles/part1c.html","id":"question","dir":"Articles","previous_headings":"","what":"Question","title":"Example analysis","text":"data analysis aims explore college tuition pay graduation relationship.","code":""},{"path":"/articles/part1c.html","id":"original-data","dir":"Articles","previous_headings":"","what":"Original Data","title":"Example analysis","text":"data originally came US Department Education. found data TidyTuesday link GitHub repository https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-03-10. use 2 datasets repository: tuition_cost.csv contains -state -state tuition school salary_potential.csv contains early mid career pay USD students school.","code":""},{"path":"/articles/part1c.html","id":"data-dictionary","dir":"Articles","previous_headings":"","what":"Data Dictionary","title":"Example analysis","text":"Data dictionaries available : https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-03-10#tuition_costcsv, https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-03-10#salary_potentialcsv.","code":""},{"path":"/articles/part1c.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load Data","title":"Example analysis","text":"","code":"# tests if a directory named \"data\" exists locally if(!dir.exists(here(\"data\"))) { dir.create(here(\"data\")) }  if(!file.exists(here(\"data\", \"tuition_cost.RData\")) | !file.exists(here(\"data\", \"salary_potential.RData\"))){   tuition_cost <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/tuition_cost.csv')   salary_potential <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/salary_potential.csv')      # save the files to RData objects   save(tuition_cost, file = here(\"data\", \"tuition_cost.RData\"))   save(salary_potential, file = here(\"data\", \"salary_potential.RData\")) } tuition_cost <- get(load(here(\"data\", \"tuition_cost.RData\"))) salary_potential <- get(load(here(\"data\", \"salary_potential.RData\"))) glimpse(tuition_cost) #> Rows: 2,973 #> Columns: 10 #> $ name                 <chr> \"Aaniiih Nakoda College\", \"Abilene Christian Univ… #> $ state                <chr> \"Montana\", \"Texas\", \"Georgia\", \"Minnesota\", \"Cali… #> $ state_code           <chr> \"MT\", \"TX\", \"GA\", \"MN\", \"CA\", \"CO\", \"NY\", \"NY\", \"… #> $ type                 <chr> \"Public\", \"Private\", \"Public\", \"For Profit\", \"For… #> $ degree_length        <chr> \"2 Year\", \"4 Year\", \"2 Year\", \"2 Year\", \"4 Year\",… #> $ room_and_board       <dbl> NA, 10350, 8474, NA, 16648, 8782, 16030, 11660, 1… #> $ in_state_tuition     <dbl> 2380, 34850, 4128, 17661, 27810, 9440, 38660, 537… #> $ in_state_total       <dbl> 2380, 45200, 12602, 17661, 44458, 18222, 54690, 1… #> $ out_of_state_tuition <dbl> 2380, 34850, 12550, 17661, 27810, 20456, 38660, 9… #> $ out_of_state_total   <dbl> 2380, 45200, 21024, 17661, 44458, 29238, 54690, 2… glimpse(salary_potential) #> Rows: 935 #> Columns: 7 #> $ rank                      <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… #> $ name                      <chr> \"Auburn University\", \"University of Alabama … #> $ state_name                <chr> \"Alabama\", \"Alabama\", \"Alabama\", \"Alabama\", … #> $ early_career_pay          <dbl> 54400, 57500, 52300, 54500, 48400, 46600, 49… #> $ mid_career_pay            <dbl> 104500, 103900, 97400, 93500, 90500, 89100, … #> $ make_world_better_percent <dbl> 51, 59, 50, 61, 52, 53, 48, 57, 56, 58, 60, … #> $ stem_percent              <dbl> 31, 45, 15, 30, 3, 12, 27, 17, 17, 20, 8, 7,…"},{"path":"/articles/part1c.html","id":"data-wrangling","dir":"Articles","previous_headings":"","what":"Data Wrangling","title":"Example analysis","text":"Luckily, don’t missing values. , see possible difference 2 columns caused dash values “state_name”. ’re going check . remove 4 observations inconsistent information. keep 4-year schools. want find modal value(s) percent student body STEM: can see modes 0 7.","code":"# We first combine the 2 data frames. We include only schools that are in both data frames. combined <- inner_join(tuition_cost, salary_potential, by = \"name\") # Remove unwanted variables combined <- combined %>% select(-room_and_board, -in_state_total, -out_of_state_total, -rank, -make_world_better_percent)  # Check if there's any NAs. If missing values exist, get the corresponding row numbers. naRows(combined) #> integer(0) # We want to check whether there's any discrepancy between the \"state\" variables from the 2 data frames. temp <- map2(.x = combined$state, .y = combined$state_name, .f = ~str_equal(.x, .y))  # Save the index of not matched cases ind <- which(temp == FALSE)  combined %>% slice(ind) %>% select(state, state_name) #> # A tibble: 135 × 2 #>    state          state_name     #>    <chr>          <chr>          #>  1 New York       New-York       #>  2 North Carolina North-Carolina #>  3 South Dakota   South-Dakota   #>  4 New York       New-York       #>  5 North Carolina North-Carolina #>  6 North Carolina North-Carolina #>  7 South Carolina South-Carolina #>  8 South Dakota   South-Dakota   #>  9 New Jersey     New-Jersey     #> 10 West Virginia  West-Virginia  #> # … with 125 more rows # Replace \"-\" with \" \" combined$state_name <- str_replace(combined$state_name, \"-\", \" \") temp2 <- pmap(list(x = combined$state, y = combined$state_name),               .f = ~str_equal(..1, ..2)) ind2 <- which(temp2 == FALSE) combined %>% slice(ind2) %>% select(name, state, state_code, state_name) #> # A tibble: 4 × 4 #>   name                 state      state_code state_name #>   <chr>                <chr>      <chr>      <chr>      #> 1 Northwestern College Illinois   IL         Iowa       #> 2 St. John's College   Illinois   IL         Maryland   #> 3 St. John's College   New Mexico NM         Maryland   #> 4 Sterling College     Vermont    VT         Kansas combined <- combined %>% slice(-ind2) %>% select(-state_name) combined #> # A tibble: 724 × 10 #>    name      state state…¹ type  degre…² in_st…³ out_o…⁴ early…⁵ mid_c…⁶ stem_…⁷ #>    <chr>     <chr> <chr>   <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 Adams St… Colo… CO      Publ… 4 Year     9440   20456   44400   81400       3 #>  2 Adventis… Flor… FL      Priv… 4 Year    15150   15150   51600   89800       5 #>  3 Agnes Sc… Geor… GA      Priv… 4 Year    41160   41160   46000   83600      26 #>  4 Alabama … Alab… AL      Publ… 4 Year    11068   19396   39800   71500      16 #>  5 Alaska P… Alas… AK      Priv… 4 Year    20830   20830   50300   90000       6 #>  6 Albany C… New … NY      Priv… 4 Year    35105   35105   81000  144800       2 #>  7 Albertus… Conn… CT      Priv… 4 Year    32060   32060   49700   85900       2 #>  8 Albion C… Mich… MI      Priv… 4 Year    45775   45775   52100   99300      23 #>  9 Alcorn S… Miss… MS      Publ… 4 Year     7144    7144   40900   69500      19 #> 10 Allen Co… Iowa  IA      Priv… 4 Year    19970   19970   51600   91300       0 #> # … with 714 more rows, and abbreviated variable names ¹​state_code, #> #   ²​degree_length, ³​in_state_tuition, ⁴​out_of_state_tuition, #> #   ⁵​early_career_pay, ⁶​mid_career_pay, ⁷​stem_percent combined %>% count(degree_length) #> # A tibble: 2 × 2 #>   degree_length     n #>   <chr>         <int> #> 1 2 Year            3 #> 2 4 Year          721 combined <- combined %>% filter(degree_length == \"4 Year\") combined #> # A tibble: 721 × 10 #>    name      state state…¹ type  degre…² in_st…³ out_o…⁴ early…⁵ mid_c…⁶ stem_…⁷ #>    <chr>     <chr> <chr>   <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 Adams St… Colo… CO      Publ… 4 Year     9440   20456   44400   81400       3 #>  2 Adventis… Flor… FL      Priv… 4 Year    15150   15150   51600   89800       5 #>  3 Agnes Sc… Geor… GA      Priv… 4 Year    41160   41160   46000   83600      26 #>  4 Alabama … Alab… AL      Publ… 4 Year    11068   19396   39800   71500      16 #>  5 Alaska P… Alas… AK      Priv… 4 Year    20830   20830   50300   90000       6 #>  6 Albany C… New … NY      Priv… 4 Year    35105   35105   81000  144800       2 #>  7 Albertus… Conn… CT      Priv… 4 Year    32060   32060   49700   85900       2 #>  8 Albion C… Mich… MI      Priv… 4 Year    45775   45775   52100   99300      23 #>  9 Alcorn S… Miss… MS      Publ… 4 Year     7144    7144   40900   69500      19 #> 10 Allen Co… Iowa  IA      Priv… 4 Year    19970   19970   51600   91300       0 #> # … with 711 more rows, and abbreviated variable names ¹​state_code, #> #   ²​degree_length, ³​in_state_tuition, ⁴​out_of_state_tuition, #> #   ⁵​early_career_pay, ⁶​mid_career_pay, ⁷​stem_percent mmode(combined$stem_percent) #> [1] 0 7"},{"path":"/articles/part1c.html","id":"data-visualization","dir":"Articles","previous_headings":"","what":"Data Visualization","title":"Example analysis","text":"Plot 1  Plot 2  Plot 3","code":"combined %>% ggplot(aes(x = type, y = out_of_state_tuition)) +     geom_boxplot() +      labs(title = \"Out-of-state Tuition by School Type\",           subtitle = \"This is a box plot displaying the summary statistics for the out-of-state tuition by school type.\\nWe can see that the first quartile of private school tuition is above the third quartile of the\\npublic school tuition.\",           caption = \"Mincen Liu\") +     xlab(\"school type\") + ylab(\"out-of-state tuition in USD\") combined %>% ggplot(aes(x = out_of_state_tuition, y = mid_career_pay)) +      geom_point() +      facet_grid(type ~ .) +      labs(title = \"Mid Career Pay vs. Out-of-state Tuition by School Type\",           subtitle = \"This is a scatter plot showing the relationship between the mid career pay and the out-of-state\\ntuition, faceted by school type. We see an overall positive relation in each school type.\",           caption = \"Mincen Liu\") +     xlab(\"out-of-state tuition in USD\") + ylab(\"mid career pay in USD\") combined %>% ggplot(aes(early_career_pay)) +     geom_density() +     labs(title = \"Early Career Pay\",           subtitle = \"This is a density plot of the early career pay. We see a right-skewed distribution.\",           caption = \"Mincen Liu\") +     xlab(\"early career pay in USD\") + ylab(\"density\")"},{"path":"/articles/part1c.html","id":"interpretation","dir":"Articles","previous_headings":"","what":"Interpretation","title":"Example analysis","text":"average, private school --state tuition much higher public school --state tuition among 4-year institutions. see overall positive relation mid career pay --state tuition school type. early career pay right-skewed distribution.","code":""},{"path":"/articles/part1c.html","id":"list-of-functions-used","dir":"Articles","previous_headings":"","what":"List of Functions Used","title":"Example analysis","text":"dplyr: glimpse(), inner_join(), select(), slice(), count(), filter() stringr: str_equal(), str_replace() purrr: map2(), pmap() ggplot2: geom_boxplot(), geom_point(), geom_density() omnibus: naRows(), mmode()","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adam B. Smith. Maintainer, author. Mincen Liu. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith , Liu M (2022). omnibus: Helper Tools Managing Data, Dates, Missing Values, Text. R package version 1.1.3, https://github.com/adamlilith/omnibus.","code":"@Manual{,   title = {omnibus: Helper Tools for Managing Data, Dates, Missing Values, and Text},   author = {Adam B. Smith and Mincen Liu},   year = {2022},   note = {R package version 1.1.3},   url = {https://github.com/adamlilith/omnibus}, }"},{"path":[]},{"path":"/index.html","id":"information","dir":"","previous_headings":"","what":"Information","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"original R package came : https://github.com/adamlilith/omnibus. URL deployed website: <>. changed overall appearance website theme Bootswatch. changed background color black text color blue gray. changed highlighting code blocks “theme: ayu-mirage”. changed background inline code light orange. changed font headings. changed font majority text.","code":""},{"path":"/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"R Utility Functions 99%  assortment helper functions managing data (e.g., rotating values matrices user-defined angle, switching row- column-indexing), dates (e.g., intuiting year messy date strings), handling missing values (e.g., removing elements/rows across multiple vectors matrices NA), text (e.g., flushing reports console real-time).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"version 1.1.2, omnibus CRAN! can install latest CRAN-stable version normal way install packages CRAN, development version using: may need install remotes package first.","code":"remotes::install_github('adamlilith/omnibus', dependencies=TRUE)"},{"path":"/index.html","id":"data-manipulation","dir":"","previous_headings":"","what":"Data manipulation","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"bracket: Find values bracket given number. combineDf: Combine data frames different schema. corner: Corner matrix data frame. cull: Force vectors matrices/data frames length number rows. insert: Insert values vector. insertCol insertRow: Insert column(s)/row(s) matrix data frame. mergeLists: Merge lists. ‘renumSeq’: Renumber sequence. maxRuns: Maximum number continuous “runs” values meeting particular condition. mirror: Flip object left-right (-). mmode: Modal value(s). rotateMatrix: Rotate matrix. roundTo: Rounds value nearest target value. rowColIndexing: Convert row column indexing matrix. stretchMinMax: Rescale values given range.","code":""},{"path":"/index.html","id":"dates","dir":"","previous_headings":"","what":"Dates","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"domLeap: Data frame days month leap year. domNonLeap: Data frame days month non-leap year. doyLeap: Data frame days year leap year. doyNonLeap: Data frame days year non-leap year. isLeapYear: year leap year? yearFromDate: Attempt find year across dates non-standard formats.","code":""},{"path":"/index.html","id":"geometry","dir":"","previous_headings":"","what":"Geometry","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"pairDist: Pairwise Euclidean distance two sets points. quadArea: Area quadrilateral.","code":""},{"path":"/index.html","id":"handling-nas","dir":"","previous_headings":"","what":"Handling NAs","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"%<na%, %<=na%, %==na%, %!=na%, %>na%, %>=na%: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). isTRUENA isFALSENA: Logical operators robust NA. naCompare: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). naOmitMulti: Remove elements multiple vectors least one element NA rows matrices/data frames least one row NA. naRows: Indices rows least one NA.","code":""},{"path":"/index.html","id":"data-properties","dir":"","previous_headings":"","what":"Data properties","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"countDecDigits: Count number digits decimal. longRun: Longest run given sequence vector. roundedSigDigits: Infers number significant digits represented decimal representation division operation digits place integer rounded. .pmax .pmin: Combine .max pmax .min pmin (vectorized .max .min).","code":""},{"path":"/index.html","id":"system","dir":"","previous_headings":"","what":"System","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"dirCreate: Nicer version dir.create(). eps: Smallest floating point value computer can think . listFiles: Nicer version list.files(). memUse: Display largest objects memory.","code":""},{"path":"/index.html","id":"text","dir":"","previous_headings":"","what":"Text","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"capIt: Capitalize first letter string. prefix: Add repeating character string ensure user-defined length (e.g., 7 –> 007). say: Replacement print('abc'); flush.console().","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"basic example isLeapYear() function:","code":"isLeapYear(2022)"},{"path":"/reference/bracket.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify values bracketing another value — bracket","title":"Identify values bracketing another value — bracket","text":"function takes ordered vector numeric character values finds pair bracket third value, x. x exactly equal one values vector, single value equal x returned. x falls outside range vector, least/extreme value vector returned (depending side distribution vector x resides). Optionally, users can function return index values bracket x.","code":""},{"path":"/reference/bracket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify values bracketing another value — bracket","text":"","code":"bracket(x, by, index = FALSE, inner = TRUE, warn = FALSE)"},{"path":"/reference/bracket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify values bracketing another value — bracket","text":"x One numeric character values. vector numeric character values. sorted (high low low high... , error result). index Logical. FALSE (default), numeric values returned. TRUE, index indices bracketing value(s) returned. inner Logical. TRUE (default), x surrounded least one series repeating values, return values (indices) among repeated sequence(s) closest value x. FALSE, return value(s) (indices) among repeated sequence(s) farthest value x. example, index = TRUE, = c(1, 2, 2, 2, 3, 3), x = 2.5, setting inner = TRUE return index third 2 first 3.  inner = FALSE, function returns index first 2 second 3. warn Logical. TRUE, warn x outside range .","code":""},{"path":"/reference/bracket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify values bracketing another value — bracket","text":"x single value, function return numeric vector length 1 2, depending many values bracket x. values , median index (value) returned. x vector, result list one element per item x element format case x single value.","code":""},{"path":"/reference/bracket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify values bracketing another value — bracket","text":"","code":"by <- 2 * (1:5) bracket(4.2, by) #> [1] 4 6 bracket(6.8, by) #> [1] 6 8  bracket(3.2, by, index=TRUE) #> [1] 1 2 bracket(c(3.2, 9.8, 4), by) #> [[1]] #> [1] 2 4 #>  #> [[2]] #> [1]  8 10 #>  #> [[3]] #> [1] 4 #>   bracket(2, c(0, 1, 1, 1, 3, 5), index=TRUE) #> [1] 4 5 bracket(3, c(1, 2, 10)) #> [1]  2 10  bracket(2.5, c(1, 2, 2, 2, 3, 3), index=TRUE) #> [1] 4 5 bracket(2.5, c(1, 2, 2, 2, 3, 3), index=TRUE, inner=FALSE) #> [1] 2 6 bracket(2.9, c(1, 2, 2, 2, 3, 3), index=TRUE) #> [1] 4 5 bracket(2.9, c(1, 2, 2, 2, 3, 3), index=TRUE, inner=FALSE) #> [1] 2 6  # \\donttest{ by <- 1:10 bracket(-100, by) #> [1] 1 bracket(100, by) #> [1] 10 # }"},{"path":"/reference/capIt.html","id":null,"dir":"Reference","previous_headings":"","what":"Capitalize first letter of a string — capIt","title":"Capitalize first letter of a string — capIt","text":"function capitalizes first letter string first letters list strings.","code":""},{"path":"/reference/capIt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capitalize first letter of a string — capIt","text":"","code":"capIt(x)"},{"path":"/reference/capIt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capitalize first letter of a string — capIt","text":"x Character character list.","code":""},{"path":"/reference/capIt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capitalize first letter of a string — capIt","text":"Character character list.","code":""},{"path":[]},{"path":"/reference/capIt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capitalize first letter of a string — capIt","text":"","code":"x <- c('shots', 'were', 'exchanged at the ', 'hospital.') capIt(x) #>              shots               were  exchanged at the           hospital.  #>            \"Shots\"             \"Were\" \"Exchanged At The\"        \"Hospital.\""},{"path":"/reference/combineDf.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine data frames with different fields using a crosswalk table — combineDf","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"function combines multiple data frames, possibly different column names, single data frame.  Usually merge faster easier implement columns merged names, rbind always faster much easier column names match exactly.","code":""},{"path":"/reference/combineDf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"","code":"combineDf(   ...,   crosswalk,   sep = \"; \",   use = NULL,   classes = NULL,   verbose = FALSE )"},{"path":"/reference/combineDf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"... list data frames. ignored, paths file names data frames can specified crosswalk. crosswalk Data frame. Column names fields desired output data frame. row corresponds different data frame join. ... used first column must paths file names CSV, RDS, RData files representing data frames join. column, elements cell contain name column data frame coincides column name crosswalk table.  example, final output column name \"species\" \"data frame #1\" column named \"Species\" \"data frame #2\" column named \"scientificName\", first value crosswalk \"species\" column \"Species\" second \"scientificName\". complex joining can done using following cells crosswalk: _ start value: indicates value crosswalk table read text repeated output row (minus initial \"_\"). example, \"_inspected\" repeat string \"inspected\" every row output corresponding respective data frame. 'c(~~~)': paste together fields source data frame named ... using string specified sep (\"~~~\" represents column names respective data frame). Note entire string must inside single double quotes 'c()' \"c()\" columns named inside c() must delineated kind quote (single c() delineated double, vice versa). NA: Repeats NA. sep Character, specifies string put fields combined c(~~~~) format crosswalk. use Logical, Character, NULL, ... used list logical elements (TRUE FALSE), column name crosswalk logical values indicating whether particular data frame collated, NULL, case data frames used (default). classes Character character list, specifies classes (e.g., numeric, character) assigned column output table. NULL, classes assumed character.  just one value listed, columns set class. list, must length number columns crosswalk specify class column. verbose Logical, TRUE prints extra information execution.  Useful debugging crosswalk table.","code":""},{"path":"/reference/combineDf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"data frame.","code":""},{"path":[]},{"path":"/reference/combineDf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"","code":"df1 <- data.frame(x1=1:5, x2='valid', x3=letters[1:5], x4=LETTERS[1:5], x5='stuff') df2 <- data.frame(y1=11:15, y3=rev(letters)[1:5])  crosswalk <- data.frame(   a=c('x1', 'y1'),   b=c('x2', '_valid'),   c=c('c(\"x3\", \"x4\")', 'y3'),   d=c('x5', NA) )  out <- combineDf(df1, df2, crosswalk=crosswalk) out #>     a     b    c     d #> 1   1 valid a; A stuff #> 2   2 valid b; B stuff #> 3   3 valid c; C stuff #> 4   4 valid d; D stuff #> 5   5 valid e; E stuff #> 6  11 valid    z  <NA> #> 7  12 valid    y  <NA> #> 8  13 valid    x  <NA> #> 9  14 valid    w  <NA> #> 10 15 valid    v  <NA>"},{"path":"/reference/corner.html","id":null,"dir":"Reference","previous_headings":"","what":"Corner of a matrix or data frame — corner","title":"Corner of a matrix or data frame — corner","text":"function returns corner matrix data frame (.e., upper left, upper right, lower left, lower right).","code":""},{"path":"/reference/corner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Corner of a matrix or data frame — corner","text":"","code":"corner(x, corner = 1, size = 5)"},{"path":"/reference/corner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Corner of a matrix or data frame — corner","text":"x Data frame, matrix, vector number rows elements . corner Integer set 1, 2, 3, 4 character set 'topleft', 'topright', 'bottomleft', 'bottomright' set 'tl', 'tr', 'bl', 'br'. Indicates corner return. Integers 1, 2, 3 4 correspond top left, top right, bottom left, bottom right corners. default 1, top left corner. size Positive integer, number rows columns return. fewer columns/rows indicated columns/rows returned.","code":""},{"path":"/reference/corner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Corner of a matrix or data frame — corner","text":"matrix data frame.","code":""},{"path":[]},{"path":"/reference/corner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Corner of a matrix or data frame — corner","text":"","code":"x <- matrix(1:120, ncol=12, nrow=10) x #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #>  [1,]    1   11   21   31   41   51   61   71   81    91   101   111 #>  [2,]    2   12   22   32   42   52   62   72   82    92   102   112 #>  [3,]    3   13   23   33   43   53   63   73   83    93   103   113 #>  [4,]    4   14   24   34   44   54   64   74   84    94   104   114 #>  [5,]    5   15   25   35   45   55   65   75   85    95   105   115 #>  [6,]    6   16   26   36   46   56   66   76   86    96   106   116 #>  [7,]    7   17   27   37   47   57   67   77   87    97   107   117 #>  [8,]    8   18   28   38   48   58   68   78   88    98   108   118 #>  [9,]    9   19   29   39   49   59   69   79   89    99   109   119 #> [10,]   10   20   30   40   50   60   70   80   90   100   110   120 corner(x, 1) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1   11   21   31   41 #> [2,]    2   12   22   32   42 #> [3,]    3   13   23   33   43 #> [4,]    4   14   24   34   44 #> [5,]    5   15   25   35   45 corner(x, 2) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   71   81   91  101  111 #> [2,]   72   82   92  102  112 #> [3,]   73   83   93  103  113 #> [4,]   74   84   94  104  114 #> [5,]   75   85   95  105  115 corner(x, 3) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    6   16   26   36   46 #> [2,]    7   17   27   37   47 #> [3,]    8   18   28   38   48 #> [4,]    9   19   29   39   49 #> [5,]   10   20   30   40   50 corner(x, 4) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   76   86   96  106  116 #> [2,]   77   87   97  107  117 #> [3,]   78   88   98  108  118 #> [4,]   79   89   99  109  119 #> [5,]   80   90  100  110  120"},{"path":"/reference/countDecDigits.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate number of digits after a decimal place — countDecDigits","title":"Calculate number of digits after a decimal place — countDecDigits","text":"function calculates number digits decimal place. Note trailing zeros likely ignored.","code":""},{"path":"/reference/countDecDigits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate number of digits after a decimal place — countDecDigits","text":"","code":"countDecDigits(x)"},{"path":"/reference/countDecDigits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate number of digits after a decimal place — countDecDigits","text":"x Numeric numeric list.","code":""},{"path":"/reference/countDecDigits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate number of digits after a decimal place — countDecDigits","text":"Integer.","code":""},{"path":"/reference/countDecDigits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate number of digits after a decimal place — countDecDigits","text":"","code":"countDecDigits(c(1, 1.1, 1.12, 1.123, 1.1234, -1, 0, 10.0000, 10.0010)) #> [1] 0 1 2 3 4 0 0 0 3"},{"path":"/reference/cull.html","id":null,"dir":"Reference","previous_headings":"","what":"Force objects to have length or rows equal to the shortest — cull","title":"Force objects to have length or rows equal to the shortest — cull","text":"function takes set vectors, data frames, matrices removes last values/rows length/number rows equal shortest among .","code":""},{"path":"/reference/cull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force objects to have length or rows equal to the shortest — cull","text":"","code":"cull(...)"},{"path":"/reference/cull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force objects to have length or rows equal to the shortest — cull","text":"... Vectors, matrices, data frames.","code":""},{"path":"/reference/cull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Force objects to have length or rows equal to the shortest — cull","text":"List objects one element per object supplied argument function.","code":""},{"path":"/reference/cull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Force objects to have length or rows equal to the shortest — cull","text":"","code":"a <- 1:10 b <- 1:20 c <- letters cull(a, b, c) #> $a #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $b #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $c #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" #>  x <- data.frame(x=1:10, y=letters[1:10]) y <- data.frame(x=1:26, y=letters) cull(x, y) #> $x #>     x y #> 1   1 a #> 2   2 b #> 3   3 c #> 4   4 d #> 5   5 e #> 6   6 f #> 7   7 g #> 8   8 h #> 9   9 i #> 10 10 j #>  #> $y #>     x y #> 1   1 a #> 2   2 b #> 3   3 c #> 4   4 d #> 5   5 e #> 6   6 f #> 7   7 g #> 8   8 h #> 9   9 i #> 10 10 j #>"},{"path":"/reference/dirCreate.html","id":null,"dir":"Reference","previous_headings":"","what":"Replacement for dir.create() — dirCreate","title":"Replacement for dir.create() — dirCreate","text":"function somewhat friendlier version dir.create automatically sets recursive=TRUE showWarnings=FALSE arguments.","code":""},{"path":"/reference/dirCreate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replacement for dir.create() — dirCreate","text":"","code":"dirCreate(...)"},{"path":"/reference/dirCreate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replacement for dir.create() — dirCreate","text":"... Character string(s). path name directory create. Multiple strings pasted together one path, although slashes pasted .","code":""},{"path":"/reference/dirCreate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replacement for dir.create() — dirCreate","text":"Nothing (creates directory storage system).","code":""},{"path":[]},{"path":"/reference/domLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of month for leap years — domLeap","title":"Day of month for leap years — domLeap","text":"Data frame day month month leap year.","code":""},{"path":"/reference/domLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of month for leap years — domLeap","text":"","code":"domLeap"},{"path":"/reference/domLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Day of month for leap years — domLeap","text":"object class 'data.frame'.","code":""},{"path":"/reference/domLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of month for leap years — domLeap","text":"","code":"data(domLeap) domLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1      1      1      1      1      1      1      1      1       1 #> 2       2      2      2      2      2      2      2      2      2       2 #> 3       3      3      3      3      3      3      3      3      3       3 #> 4       4      4      4      4      4      4      4      4      4       4 #> 5       5      5      5      5      5      5      5      5      5       5 #> 6       6      6      6      6      6      6      6      6      6       6 #> 7       7      7      7      7      7      7      7      7      7       7 #> 8       8      8      8      8      8      8      8      8      8       8 #> 9       9      9      9      9      9      9      9      9      9       9 #> 10     10     10     10     10     10     10     10     10     10      10 #> 11     11     11     11     11     11     11     11     11     11      11 #> 12     12     12     12     12     12     12     12     12     12      12 #> 13     13     13     13     13     13     13     13     13     13      13 #> 14     14     14     14     14     14     14     14     14     14      14 #> 15     15     15     15     15     15     15     15     15     15      15 #> 16     16     16     16     16     16     16     16     16     16      16 #> 17     17     17     17     17     17     17     17     17     17      17 #> 18     18     18     18     18     18     18     18     18     18      18 #> 19     19     19     19     19     19     19     19     19     19      19 #> 20     20     20     20     20     20     20     20     20     20      20 #> 21     21     21     21     21     21     21     21     21     21      21 #> 22     22     22     22     22     22     22     22     22     22      22 #> 23     23     23     23     23     23     23     23     23     23      23 #> 24     24     24     24     24     24     24     24     24     24      24 #> 25     25     25     25     25     25     25     25     25     25      25 #> 26     26     26     26     26     26     26     26     26     26      26 #> 27     27     27     27     27     27     27     27     27     27      27 #> 28     28     28     28     28     28     28     28     28     28      28 #> 29     29     29     29     29     29     29     29     29     29      29 #> 30     30     NA     30     30     30     30     30     30     30      30 #> 31     31     NA     31     NA     31     NA     31     31     NA      31 #>    month11 month12 #> 1        1       1 #> 2        2       2 #> 3        3       3 #> 4        4       4 #> 5        5       5 #> 6        6       6 #> 7        7       7 #> 8        8       8 #> 9        9       9 #> 10      10      10 #> 11      11      11 #> 12      12      12 #> 13      13      13 #> 14      14      14 #> 15      15      15 #> 16      16      16 #> 17      17      17 #> 18      18      18 #> 19      19      19 #> 20      20      20 #> 21      21      21 #> 22      22      22 #> 23      23      23 #> 24      24      24 #> 25      25      25 #> 26      26      26 #> 27      27      27 #> 28      28      28 #> 29      29      29 #> 30      30      30 #> 31      NA      31"},{"path":"/reference/domNonLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of month for non-leap years — domNonLeap","title":"Day of month for non-leap years — domNonLeap","text":"Data frame day month month non-leap year.","code":""},{"path":"/reference/domNonLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of month for non-leap years — domNonLeap","text":"","code":"domNonLeap"},{"path":"/reference/domNonLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Day of month for non-leap years — domNonLeap","text":"object class 'data.frame'.","code":""},{"path":"/reference/domNonLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of month for non-leap years — domNonLeap","text":"","code":"data(domNonLeap) domNonLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1      1      1      1      1      1      1      1      1       1 #> 2       2      2      2      2      2      2      2      2      2       2 #> 3       3      3      3      3      3      3      3      3      3       3 #> 4       4      4      4      4      4      4      4      4      4       4 #> 5       5      5      5      5      5      5      5      5      5       5 #> 6       6      6      6      6      6      6      6      6      6       6 #> 7       7      7      7      7      7      7      7      7      7       7 #> 8       8      8      8      8      8      8      8      8      8       8 #> 9       9      9      9      9      9      9      9      9      9       9 #> 10     10     10     10     10     10     10     10     10     10      10 #> 11     11     11     11     11     11     11     11     11     11      11 #> 12     12     12     12     12     12     12     12     12     12      12 #> 13     13     13     13     13     13     13     13     13     13      13 #> 14     14     14     14     14     14     14     14     14     14      14 #> 15     15     15     15     15     15     15     15     15     15      15 #> 16     16     16     16     16     16     16     16     16     16      16 #> 17     17     17     17     17     17     17     17     17     17      17 #> 18     18     18     18     18     18     18     18     18     18      18 #> 19     19     19     19     19     19     19     19     19     19      19 #> 20     20     20     20     20     20     20     20     20     20      20 #> 21     21     21     21     21     21     21     21     21     21      21 #> 22     22     22     22     22     22     22     22     22     22      22 #> 23     23     23     23     23     23     23     23     23     23      23 #> 24     24     24     24     24     24     24     24     24     24      24 #> 25     25     25     25     25     25     25     25     25     25      25 #> 26     26     26     26     26     26     26     26     26     26      26 #> 27     27     27     27     27     27     27     27     27     27      27 #> 28     28     28     28     28     28     28     28     28     28      28 #> 29     29     NA     29     29     29     29     29     29     29      29 #> 30     30     NA     30     30     30     30     30     30     30      30 #> 31     31     NA     31     NA     31     NA     31     31     NA      31 #>    month11 month12 #> 1        1       1 #> 2        2       2 #> 3        3       3 #> 4        4       4 #> 5        5       5 #> 6        6       6 #> 7        7       7 #> 8        8       8 #> 9        9       9 #> 10      10      10 #> 11      11      11 #> 12      12      12 #> 13      13      13 #> 14      14      14 #> 15      15      15 #> 16      16      16 #> 17      17      17 #> 18      18      18 #> 19      19      19 #> 20      20      20 #> 21      21      21 #> 22      22      22 #> 23      23      23 #> 24      24      24 #> 25      25      25 #> 26      26      26 #> 27      27      27 #> 28      28      28 #> 29      29      29 #> 30      30      30 #> 31      NA      31"},{"path":"/reference/doyLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of year for leap years — doyLeap","title":"Day of year for leap years — doyLeap","text":"Data frame day year month leap year.","code":""},{"path":"/reference/doyLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of year for leap years — doyLeap","text":"","code":"doyLeap"},{"path":"/reference/doyLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Day of year for leap years — doyLeap","text":"object class 'data.frame'.","code":""},{"path":"/reference/doyLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of year for leap years — doyLeap","text":"","code":"data(doyLeap) doyLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1     32     61     92    122    153    183    214    245     275 #> 2       2     33     62     93    123    154    184    215    246     276 #> 3       3     34     63     94    124    155    185    216    247     277 #> 4       4     35     64     95    125    156    186    217    248     278 #> 5       5     36     65     96    126    157    187    218    249     279 #> 6       6     37     66     97    127    158    188    219    250     280 #> 7       7     38     67     98    128    159    189    220    251     281 #> 8       8     39     68     99    129    160    190    221    252     282 #> 9       9     40     69    100    130    161    191    222    253     283 #> 10     10     41     70    101    131    162    192    223    254     284 #> 11     11     42     71    102    132    163    193    224    255     285 #> 12     12     43     72    103    133    164    194    225    256     286 #> 13     13     44     73    104    134    165    195    226    257     287 #> 14     14     45     74    105    135    166    196    227    258     288 #> 15     15     46     75    106    136    167    197    228    259     289 #> 16     16     47     76    107    137    168    198    229    260     290 #> 17     17     48     77    108    138    169    199    230    261     291 #> 18     18     49     78    109    139    170    200    231    262     292 #> 19     19     50     79    110    140    171    201    232    263     293 #> 20     20     51     80    111    141    172    202    233    264     294 #> 21     21     52     81    112    142    173    203    234    265     295 #> 22     22     53     82    113    143    174    204    235    266     296 #> 23     23     54     83    114    144    175    205    236    267     297 #> 24     24     55     84    115    145    176    206    237    268     298 #> 25     25     56     85    116    146    177    207    238    269     299 #> 26     26     57     86    117    147    178    208    239    270     300 #> 27     27     58     87    118    148    179    209    240    271     301 #> 28     28     59     88    119    149    180    210    241    272     302 #> 29     29     60     89    120    150    181    211    242    273     303 #> 30     30     NA     90    121    151    182    212    243    274     304 #> 31     31     NA     91     NA    152     NA    213    244     NA     305 #>    month11 month12 #> 1      306     336 #> 2      307     337 #> 3      308     338 #> 4      309     339 #> 5      310     340 #> 6      311     341 #> 7      312     342 #> 8      313     343 #> 9      314     344 #> 10     315     345 #> 11     316     346 #> 12     317     347 #> 13     318     348 #> 14     319     349 #> 15     320     350 #> 16     321     351 #> 17     322     352 #> 18     323     353 #> 19     324     354 #> 20     325     355 #> 21     326     356 #> 22     327     357 #> 23     328     358 #> 24     329     359 #> 25     330     360 #> 26     331     361 #> 27     332     362 #> 28     333     363 #> 29     334     364 #> 30     335     365 #> 31      NA     366"},{"path":"/reference/doyNonLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Days of year for non-leap years — doyNonLeap","title":"Days of year for non-leap years — doyNonLeap","text":"Data frame days year month non-leap year","code":""},{"path":"/reference/doyNonLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Days of year for non-leap years — doyNonLeap","text":"","code":"doyNonLeap"},{"path":"/reference/doyNonLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Days of year for non-leap years — doyNonLeap","text":"object class 'data.frame'.","code":""},{"path":"/reference/doyNonLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Days of year for non-leap years — doyNonLeap","text":"","code":"data(doyNonLeap) doyNonLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1     32     60     91    121    152    182    213    244     274 #> 2       2     33     61     92    122    153    183    214    245     275 #> 3       3     34     62     93    123    154    184    215    246     276 #> 4       4     35     63     94    124    155    185    216    247     277 #> 5       5     36     64     95    125    156    186    217    248     278 #> 6       6     37     65     96    126    157    187    218    249     279 #> 7       7     38     66     97    127    158    188    219    250     280 #> 8       8     39     67     98    128    159    189    220    251     281 #> 9       9     40     68     99    129    160    190    221    252     282 #> 10     10     41     69    100    130    161    191    222    253     283 #> 11     11     42     70    101    131    162    192    223    254     284 #> 12     12     43     71    102    132    163    193    224    255     285 #> 13     13     44     72    103    133    164    194    225    256     286 #> 14     14     45     73    104    134    165    195    226    257     287 #> 15     15     46     74    105    135    166    196    227    258     288 #> 16     16     47     75    106    136    167    197    228    259     289 #> 17     17     48     76    107    137    168    198    229    260     290 #> 18     18     49     77    108    138    169    199    230    261     291 #> 19     19     50     78    109    139    170    200    231    262     292 #> 20     20     51     79    110    140    171    201    232    263     293 #> 21     21     52     80    111    141    172    202    233    264     294 #> 22     22     53     81    112    142    173    203    234    265     295 #> 23     23     54     82    113    143    174    204    235    266     296 #> 24     24     55     83    114    144    175    205    236    267     297 #> 25     25     56     84    115    145    176    206    237    268     298 #> 26     26     57     85    116    146    177    207    238    269     299 #> 27     27     58     86    117    147    178    208    239    270     300 #> 28     28     59     87    118    148    179    209    240    271     301 #> 29     29     NA     88    119    149    180    210    241    272     302 #> 30     30     NA     89    120    150    181    211    242    273     303 #> 31     31     NA     90     NA    151     NA    212    243     NA     304 #>    month11 month12 #> 1      305     335 #> 2      306     336 #> 3      307     337 #> 4      308     338 #> 5      309     339 #> 6      310     340 #> 7      311     341 #> 8      312     342 #> 9      313     343 #> 10     314     344 #> 11     315     345 #> 12     316     346 #> 13     317     347 #> 14     318     348 #> 15     319     349 #> 16     320     350 #> 17     321     351 #> 18     322     352 #> 19     323     353 #> 20     324     354 #> 21     325     355 #> 22     326     356 #> 23     327     357 #> 24     328     358 #> 25     329     359 #> 26     330     360 #> 27     331     361 #> 28     332     362 #> 29     333     363 #> 30     334     364 #> 31      NA     365"},{"path":"/reference/ellipseNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","title":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","text":"function returns names objects input function ellipses. useful called inside function.","code":""},{"path":"/reference/ellipseNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","text":"","code":"ellipseNames(...)"},{"path":"/reference/ellipseNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","text":"... Objects.","code":""},{"path":"/reference/ellipseNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","text":"Character list.","code":""},{"path":"/reference/eps.html","id":null,"dir":"Reference","previous_headings":"","what":"The smallest machine-readable number — eps","title":"The smallest machine-readable number — eps","text":"function returns smallest machine-readable number (equal .Machine$double.eps).","code":""},{"path":"/reference/eps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The smallest machine-readable number — eps","text":"","code":"eps()"},{"path":"/reference/eps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The smallest machine-readable number — eps","text":"Numeric value.","code":""},{"path":"/reference/eps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The smallest machine-readable number — eps","text":"","code":"eps() #> [1] 2.220446e-16"},{"path":"/reference/insert.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert values into a vector — insert","title":"Insert values into a vector — insert","text":"function inserts values vector, lengthening overall vector. different , say, x[1:3] <- c('', 'b', 'c') simply replaces values indices 1 3.","code":""},{"path":"/reference/insert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert values into a vector — insert","text":"","code":"insert(x, into, at, warn = TRUE)"},{"path":"/reference/insert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert values into a vector — insert","text":"x Vector values insert. vector values insert x. Vector positions (indices) x inserted. length x shorter length , values x recycled warning produced. warn TRUE, provide warnings.","code":""},{"path":"/reference/insert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert values into a vector — insert","text":"Vector.","code":""},{"path":[]},{"path":"/reference/insert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert values into a vector — insert","text":"","code":"x <- -1:-3 into <- 10:20 at <- c(1, 3, 14) insert(x, into, at) #>  [1] -1 10 -2 11 12 13 14 15 16 17 18 19 20 -3  insert(-1, into, at) #> Warning: Length of x is shorter than the length of at. Recycling x. #>  [1] -1 10 -1 11 12 13 14 15 16 17 18 19 20 -1"},{"path":"/reference/insertCol.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert a column or row into a data frame or matrix — insertCol","title":"Insert a column or row into a data frame or matrix — insertCol","text":"function inserts one columns rows another column row data frame matrix. similar cbind except inserted column(s)/row(s) can placed anywhere.","code":""},{"path":"/reference/insertCol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert a column or row into a data frame or matrix — insertCol","text":"","code":"insertCol(x, into, at = NULL, before = TRUE)  insertRow(x, into, at = NULL, before = TRUE)"},{"path":"/reference/insertCol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert a column or row into a data frame or matrix — insertCol","text":"x Data frame, matrix, vector number columns rows elements . Data frame matrix x inserted. Character, integer, NULL. Name column column number name row row number insertion. NULL (default), result exactly cbind(, x except retains row numbers column names . Logical, TRUE (default) insertion occur front column row named , FALSE . Ignored NULL.","code":""},{"path":"/reference/insertCol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert a column or row into a data frame or matrix — insertCol","text":"data frame.","code":""},{"path":"/reference/insertCol.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Insert a column or row into a data frame or matrix — insertCol","text":"insertRow(): Insert column row data frame matrix","code":""},{"path":[]},{"path":"/reference/insertCol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert a column or row into a data frame or matrix — insertCol","text":"","code":"x <- data.frame(y1=11:15, y2=rev(letters)[1:5]) into <- data.frame(x1=1:5, x2='valid', x3=letters[1:5], x4=LETTERS[1:5], x5='stuff')  insertCol(x, into=into, at='x3') #>   x1    x2 y1 y2 x3 x4    x5 #> 1  1 valid 11  z  a  A stuff #> 2  2 valid 12  y  b  B stuff #> 3  3 valid 13  x  c  C stuff #> 4  4 valid 14  w  d  D stuff #> 5  5 valid 15  v  e  E stuff insertCol(x, into=into, at='x3', before=FALSE) #>   x1    x2 x3 y1 y2 x4    x5 #> 1  1 valid  a 11  z  A stuff #> 2  2 valid  b 12  y  B stuff #> 3  3 valid  c 13  x  C stuff #> 4  4 valid  d 14  w  D stuff #> 5  5 valid  e 15  v  E stuff insertCol(x, into) #>   x1    x2 x3 x4    x5 y1 y2 #> 1  1 valid  a  A stuff 11  z #> 2  2 valid  b  B stuff 12  y #> 3  3 valid  c  C stuff 13  x #> 4  4 valid  d  D stuff 14  w #> 5  5 valid  e  E stuff 15  v  x <- data.frame(x1=1:3, x2=LETTERS[1:3]) into <- data.frame(x1=11:15, x2='valid') row.names(into) <- letters[1:5]  insertRow(x, into=into, at='b') #>   x1    x2 #> a 11 valid #> 1  1     A #> 2  2     B #> 3  3     C #> b 12 valid #> c 13 valid #> d 14 valid #> e 15 valid insertRow(x, into=into, at='b', before=FALSE) #>   x1    x2 #> a 11 valid #> b 12 valid #> 1  1     A #> 2  2     B #> 3  3     C #> c 13 valid #> d 14 valid #> e 15 valid insertRow(x, into) #>   x1    x2 #> a 11 valid #> b 12 valid #> c 13 valid #> d 14 valid #> e 15 valid #> 1  1     A #> 2  2     B #> 3  3     C"},{"path":"/reference/isLeapYear.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a year a leap year? — isLeapYear","title":"Is a year a leap year? — isLeapYear","text":"Returns TRUE year leap year. can use \"negative\" years BCE.","code":""},{"path":"/reference/isLeapYear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a year a leap year? — isLeapYear","text":"","code":"isLeapYear(x)"},{"path":"/reference/isLeapYear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a year a leap year? — isLeapYear","text":"x Integer vector integers representing years.","code":""},{"path":"/reference/isLeapYear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a year a leap year? — isLeapYear","text":"Vector logical values.","code":""},{"path":"/reference/isLeapYear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is a year a leap year? — isLeapYear","text":"","code":"isLeapYear(1990:2004) # note 2000 *was* not a leap year #>  [1] FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE #> [13] FALSE FALSE  TRUE isLeapYear(1896:1904) # 1900 was *not* a leap year #> [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE"},{"path":"/reference/isTRUENA.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized test for truth robust to NA — isTRUENA","title":"Vectorized test for truth robust to NA — isTRUENA","text":"functions work exactly x == TRUE x == FALSE default return FALSE cases NA.","code":""},{"path":"/reference/isTRUENA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized test for truth robust to NA — isTRUENA","text":"","code":"isTRUENA(x, ifNA = FALSE)  isFALSENA(x, ifNA = FALSE)"},{"path":"/reference/isTRUENA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized test for truth robust to NA — isTRUENA","text":"x Single value condition vector values evaluate. ifNA Logical, value return result evaluating x NA. Note can anything (.e., TRUE, FALSE, number, etc.).","code":""},{"path":"/reference/isTRUENA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorized test for truth robust to NA — isTRUENA","text":"Logical value specified ifNA.","code":""},{"path":"/reference/isTRUENA.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Vectorized test for truth robust to NA — isTRUENA","text":"isFALSENA(): Vectorized test truth robust NA","code":""},{"path":[]},{"path":"/reference/isTRUENA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorized test for truth robust to NA — isTRUENA","text":"","code":"x <- c(TRUE, TRUE, FALSE, NA) x == TRUE #> [1]  TRUE  TRUE FALSE    NA isTRUENA(x) #> [1]  TRUE  TRUE FALSE FALSE x == FALSE #> [1] FALSE FALSE  TRUE    NA isFALSENA(x) #> [1] FALSE FALSE  TRUE FALSE isTRUENA(x, ifNA = Inf) #> [1]   1   1   0 Inf # note that isTRUE and isFALSE are not vectorized isTRUE(x) #> [1] FALSE isFALSE(x) #> [1] FALSE"},{"path":"/reference/listFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Replacement for list.files() — listFiles","title":"Replacement for list.files() — listFiles","text":"function slightly friendlier version list.files automatically includes full.names=TRUE argument.","code":""},{"path":"/reference/listFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replacement for list.files() — listFiles","text":"","code":"listFiles(x, ...)"},{"path":"/reference/listFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replacement for list.files() — listFiles","text":"x Path name folder containing files list. ... Arguments pass list.files (full.names).","code":""},{"path":"/reference/listFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replacement for list.files() — listFiles","text":"Character list.","code":""},{"path":[]},{"path":"/reference/listFiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replacement for list.files() — listFiles","text":"","code":"# list files in location where R is installed listFiles(R.home()) #>  [1] \"/Library/Frameworks/R.framework/Resources/COPYING\"      #>  [2] \"/Library/Frameworks/R.framework/Resources/Info.plist\"   #>  [3] \"/Library/Frameworks/R.framework/Resources/R\"            #>  [4] \"/Library/Frameworks/R.framework/Resources/Rscript\"      #>  [5] \"/Library/Frameworks/R.framework/Resources/SVN-REVISION\" #>  [6] \"/Library/Frameworks/R.framework/Resources/bin\"          #>  [7] \"/Library/Frameworks/R.framework/Resources/doc\"          #>  [8] \"/Library/Frameworks/R.framework/Resources/etc\"          #>  [9] \"/Library/Frameworks/R.framework/Resources/fontconfig\"   #> [10] \"/Library/Frameworks/R.framework/Resources/include\"      #> [11] \"/Library/Frameworks/R.framework/Resources/lib\"          #> [12] \"/Library/Frameworks/R.framework/Resources/library\"      #> [13] \"/Library/Frameworks/R.framework/Resources/man1\"         #> [14] \"/Library/Frameworks/R.framework/Resources/modules\"      #> [15] \"/Library/Frameworks/R.framework/Resources/share\"        #> [16] \"/Library/Frameworks/R.framework/Resources/tests\"        listFiles(R.home(), pattern='README') #> character(0)"},{"path":"/reference/longRun.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of the longest run of a particular value in a numeric vector — longRun","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"function returns lengh longest run particular numeric value numeric vector.  \"run\" uninterrupted  sequence number. Runs can \"wrapped\" sequence starts ends target value considered consecutive run.","code":""},{"path":"/reference/longRun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"","code":"longRun(x, val, wrap = FALSE, na.rm = FALSE)"},{"path":"/reference/longRun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"x Numeric vector. val Numeric. Value elements x calculate length longest run. wrap Logical. TRUE runs can \"wrap\" end x start x first last elements x equal val. na.rm Logical. TRUE remove NAs first.","code":""},{"path":"/reference/longRun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"Integer.","code":""},{"path":[]},{"path":"/reference/longRun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"","code":"x <- c(1, 1, 1, 2, 2, 3, 4, 5, 6, 1, 1, 1, 1, 1) longRun(x, 2) #> [1] 2 longRun(x, 1) #> [1] 5 longRun(x, 1, wrap=TRUE) #> [1] 8"},{"path":"/reference/maxRuns.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum number of continuous ","title":"Maximum number of continuous ","text":"Consider ordered set values, say 1, 4, 0, 0, 0, 2, 0, 10. can ask, number times zeroes appear successively? example, one set three continuous zeros, one set single zero. number runs zero 2, maximum run length 3. function calculates number runs based certain condition defining run. condition stated function returns logical value. function example function(x) x == 0.","code":""},{"path":"/reference/maxRuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum number of continuous ","text":"","code":"maxRuns(x, fx, args = NULL, failIfAllNA = FALSE)"},{"path":"/reference/maxRuns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum number of continuous ","text":"x Vector numeric, character, values. fx function returns TRUE, FALSE, (optionally) NA. function must use x first argument. example, function(x) x == 0 allowable, function(y) y == 0 . Values count TRUE counted toward run. args list object additional arguments supply function fx. failIfAllNA TRUE, fail values NA evaluated fx.","code":""},{"path":"/reference/maxRuns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum number of continuous ","text":"Lengths successive runs elements meet criterion. single value 0 indicates conditions meet criterion.","code":""},{"path":"/reference/maxRuns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum number of continuous ","text":"","code":"x <- c(1, 4, 0, 0, 0, 2, 0, 10) fx <- function(x) x == 0 maxRuns(x, fx) #> [1] 3  fx <- function(x) x > 0 maxRuns(x, fx) #> [1] 2   fx <- function(x) x > 0 & x < 5 maxRuns(x, fx) #> [1] 2  x <- c(1, 4, 0, 0, 0, 2, 0, 10) fx <- function(x, th) x == th maxRuns(x, fx, args=list(th=0)) #> [1] 3  # \"count\" NA as an observation  x <- c(1, 4, 0, 0, 0, NA, 0, 10) fx <- function(x, th) ifelse(is.na(x), FALSE, x == th) maxRuns(x, fx, args=list(th=0)) #> [1] 3   # include NAs as part of a run x <- c(1, 4, 0, 0, 0, NA, 0, 10) fx <- function(x, th) ifelse(is.na(x), TRUE, x == th) maxRuns(x, fx, args=list(th=0)) #> [1] 5"},{"path":"/reference/memUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Size of objects taking most memory use — memUse","title":"Size of objects taking most memory use — memUse","text":"Displays largest objects memUse.","code":""},{"path":"/reference/memUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Size of objects taking most memory use — memUse","text":"","code":"memUse(   n = 10,   orderBy = \"size\",   decreasing = TRUE,   pos = 1,   display = TRUE,   ... )"},{"path":"/reference/memUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Size of objects taking most memory use — memUse","text":"n Positive integer, maximum number objects display. orderBy Either 'size' (default) 'name'. decreasing Logical, TRUE (default), objects displayed largest smallest. pos Environment obtain size objects. Default 1. See ls.#\" display TRUE (default), print table memUse used. ... arguments pass ls.","code":""},{"path":"/reference/memUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Size of objects taking most memory use — memUse","text":"Data frame (invisible).","code":""},{"path":"/reference/memUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Size of objects taking most memory use — memUse","text":"","code":"memUse() #>                    size #> tuition_cost     497832 #> salary_potential 139232 #> combined         123920 #> temp              46640 #> temp2             46640 #> domLeap            3648 #> domNonLeap         3648 #> doyLeap            3648 #> doyNonLeap         3648 #> ind                 592 memUse(3) #>                    size #> tuition_cost     497832 #> salary_potential 139232 #> combined         123920"},{"path":"/reference/mergeLists.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two lists with precedence — mergeLists","title":"Merge two lists with precedence — mergeLists","text":"function merges two lists create single, combined list. conflict (e.g., two elements name), items second list gain preference. Adapted Stack Overflow (http://stackoverflow.com/questions/13811501/r-merge-lists--overwrite--recursion).","code":""},{"path":"/reference/mergeLists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two lists with precedence — mergeLists","text":"","code":"mergeLists(list1, list2)"},{"path":"/reference/mergeLists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two lists with precedence — mergeLists","text":"list1 List object. list2 List object.","code":""},{"path":"/reference/mergeLists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two lists with precedence — mergeLists","text":"List object.","code":""},{"path":"/reference/mergeLists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two lists with precedence — mergeLists","text":"","code":"list1 <- list(a=1:3, b='Hello world', c=LETTERS[1:3]) list2 <- list(x=4, b='Goodbye world', z=letters[1:2]) mergeLists(list1, list2) #> $x #> [1] 4 #>  #> $b #> [1] \"Goodbye world\" #>  #> $z #> [1] \"a\" \"b\" #>  #> $a #> [1] 1 2 3 #>  #> $c #> [1] \"A\" \"B\" \"C\" #>  mergeLists(list2, list1) #> $a #> [1] 1 2 3 #>  #> $b #> [1] \"Hello world\" #>  #> $c #> [1] \"A\" \"B\" \"C\" #>  #> $x #> [1] 4 #>  #> $z #> [1] \"a\" \"b\" #>  list3 <- list(m=list(n=4:7, o=pi), a=1:5) mergeLists(list1, list3) #> $m #> $m$n #> [1] 4 5 6 7 #>  #> $m$o #> [1] 3.141593 #>  #>  #> $a #> [1] 1 2 3 4 5 #>  #> $b #> [1] \"Hello world\" #>  #> $c #> [1] \"A\" \"B\" \"C\" #>"},{"path":"/reference/mirror.html","id":null,"dir":"Reference","previous_headings":"","what":"Flip an object — mirror","title":"Flip an object — mirror","text":"function creates \"mirror\" image character string, number, matrix, data frame. example \"Shots exchanged hospital\" becomes \"latipsoh eht ta degnahcxe erew stohS' 3.14159 becomes 95141.3. Data frames matrices returned order columns order rows reversed.","code":""},{"path":"/reference/mirror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flip an object — mirror","text":"","code":"mirror(x, direction = \"lr\")"},{"path":"/reference/mirror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flip an object — mirror","text":"x Numeric character, vector numeric character values, matrix data frame. direction used x matrix data frame. Accepted values 'lr' (left-right mirror) 'ud' (-mirror).","code":""},{"path":"/reference/mirror.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flip an object — mirror","text":"Object class x.","code":""},{"path":"/reference/mirror.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flip an object — mirror","text":"","code":"x <- 'Shots were exchanged at the hospital' mirror(x) #> [1] \"latipsoh eht ta degnahcxe erew stohS\"  x <- c('Water', 'water', 'everywhere') mirror(x) #> [1] \"retaW\"      \"retaw\"      \"erehwyreve\"  # last value will return NA because the exponentiation does not  # make sense when written backwards x <- c(3.14159, 2.71828, 6.02214076e+23)  mirror(x) #> Warning: NAs introduced by coercion #> [1] 95141.3 82817.2      NA x <- data.frame(x=1:5, y=6:10) mirror(x) #>    y x #> 1  6 1 #> 2  7 2 #> 3  8 3 #> 4  9 4 #> 5 10 5  x <- matrix(1:10, nrow=2) mirror(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    9    7    5    3    1 #> [2,]   10    8    6    4    2 #> attr(,\"class\") #> [1] \"matrix\" \"array\""},{"path":"/reference/mmode.html","id":null,"dir":"Reference","previous_headings":"","what":"Modal value(s) — mmode","title":"Modal value(s) — mmode","text":"Modal value. one unique mode, modal values returned.","code":""},{"path":"/reference/mmode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modal value(s) — mmode","text":"","code":"mmode(x)"},{"path":"/reference/mmode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modal value(s) — mmode","text":"x Numeric character vector.","code":""},{"path":"/reference/mmode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modal value(s) — mmode","text":"Numeric character vector.","code":""},{"path":"/reference/mmode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modal value(s) — mmode","text":"","code":"x <- c(1, 2, 3, 3, 4, 5, 3, 1, 2) mmode(x) #> [1] 3  x <- c(1, 2, 3) mmode(x) #> [1] 1 2 3"},{"path":"/reference/naCompare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"function set operators perform simple (vectorized) comparisons using <, <=, >, >=, !=, == values always returns TRUE FALSE. TRUE occurs condition can evaluated TRUE. FALSE returned condition FALSE evaluated.","code":""},{"path":"/reference/naCompare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"","code":"naCompare(op, x, y)  x %<na% y  x %<=na% y  x %==na% y  x %!=na% y  x %>na% y  x %>=na% y"},{"path":"/reference/naCompare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"op Character, operation perform: '<', '<=', '>', '>=', '!=', '=='. Note must character (.e., put quotes). x, y Vectors numeric, character, NA, /NaN values. first value operation x XXX y XXX operator op. x shorter y x recycled.","code":""},{"path":"/reference/naCompare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"Vector logical values.","code":""},{"path":"/reference/naCompare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"","code":"naCompare('<', c(1, 2, NA), c(10, 1, 0)) #> [1]  TRUE FALSE FALSE naCompare('<', c(1, 2, NA), 10) #> [1]  TRUE  TRUE FALSE naCompare('<', c(1, 2, NA), NA) #> [1] FALSE FALSE FALSE # compare to: NA < 5 #> [1] NA NA < NA #> [1] NA  # same operations with operators: 1 %<na% 2 #> [1] TRUE 1 %<na% NA #> [1] FALSE 3 %==na% 3 #> [1] TRUE NA %==na% 3 #> [1] FALSE 4 %!=na% 4 #> [1] FALSE 4 %!=na% NA #> [1] FALSE 5 %>=na% 3 #> [1] TRUE 5 %>=na% NA #> [1] FALSE 3 %==na% c(NA, 1, 2, 3, 4) #> [1] FALSE FALSE FALSE  TRUE FALSE  # compare to: 1 < 2 #> [1] TRUE 1 < NA #> [1] NA 3 == 3 #> [1] TRUE NA == 3 #> [1] NA 4 != 4 #> [1] FALSE 4 != NA #> [1] NA 5 >= 3 #> [1] TRUE 5 >= NA #> [1] NA 3 == c(NA, 1, 2, 3, 4) #> [1]    NA FALSE FALSE  TRUE FALSE"},{"path":"/reference/naOmitMulti.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove NAs from one or more equal-length vectors — naOmitMulti","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"function removes elements one equal-length vectors one NA position. example, three vectors , B, C, NA first position C NA third position, , B, C elements positions 1 3 removed.","code":""},{"path":"/reference/naOmitMulti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"","code":"naOmitMulti(...)"},{"path":"/reference/naOmitMulti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"... Vectors (numeric character).","code":""},{"path":"/reference/naOmitMulti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"List objects class ....","code":""},{"path":[]},{"path":"/reference/naOmitMulti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"","code":"a <- c(NA, 'b', 'c', 'd', 'e', NA) b <- c(1, 2, 3, NA, 5, NA) c <- c(6, 7, 8, 9, 10, NA) naOmitMulti(a, b, c) #> [[1]] #> [1] \"b\" \"c\" \"e\" #>  #> [[2]] #> [1] 2 3 5 #>  #> [[3]] #> [1]  7  8 10 #>"},{"path":"/reference/naRows.html","id":null,"dir":"Reference","previous_headings":"","what":"Index of rows in a data frame or matrix that contain at least one NA — naRows","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"function returns row number row data frame matrix least one NA. (!complete.cases(x)).","code":""},{"path":"/reference/naRows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"","code":"naRows(x, inf = FALSE, inverse = FALSE)"},{"path":"/reference/naRows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"x Data frame matrix. inf Logical, TRUE also return row numbers rows least one element Inf -Inf. default FALSE. inverse Logical, TRUE return row numbers rows NAs (possibly Inf -Inf).  default FALSE.","code":""},{"path":"/reference/naRows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"Integer vector.","code":""},{"path":"/reference/naRows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"","code":"x <- data.frame(a=1:5, b=c(1, 2, NA, 4, 5), c=c('a', 'b', 'c', 'd', NA)) naRows(x) #> [1] 3 5"},{"path":"/reference/omnibus.html","id":null,"dir":"Reference","previous_headings":"","what":"omnibus: Fantabulous helper functions — omnibus","title":"omnibus: Fantabulous helper functions — omnibus","text":"package contains set helper functions.","code":""},{"path":"/reference/omnibus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"omnibus: Fantabulous helper functions — omnibus","text":"Create issue GitHub.","code":""},{"path":"/reference/omnibus.html","id":"data-manipulation","dir":"Reference","previous_headings":"","what":"Data manipulation","title":"omnibus: Fantabulous helper functions — omnibus","text":"bracket: Find values bracket given number. combineDf: Combine data frames different schema. corner: Corner matrix data frame. cull: Force vectors matrices/data frames length number rows. insert: Insert values vector. insertCol insertRow: Insert column(s)/row(s) matrix data frame. maxRuns: Maximum number continuous \"runs\" values meeting particular condition. mirror: Flip object left-right (-). mmode: Modal value(s). mergeLists: Merge lists. renumSeq: Renumber sequence. rotateMatrix: Rotate matrix. roundTo: Rounds value nearest target value. rowColIndexing: Convert row column indexing matrix. stretchMinMax: Rescale values given range.","code":""},{"path":"/reference/omnibus.html","id":"dates","dir":"Reference","previous_headings":"","what":"Dates","title":"omnibus: Fantabulous helper functions — omnibus","text":"domLeap: Data frame days month leap year. domNonLeap: Data frame days month non-leap year. doyLeap: Data frame days year leap year. doyNonLeap: Data frame days year non-leap year. isLeapYear: year leap year?  yearFromDate: Attempt find year across dates non-standard formats.","code":""},{"path":"/reference/omnibus.html","id":"geometry","dir":"Reference","previous_headings":"","what":"Geometry","title":"omnibus: Fantabulous helper functions — omnibus","text":"pairDist: Pairwise Euclidean distance two sets points. quadArea: Area quadrilateral.","code":""},{"path":"/reference/omnibus.html","id":"handling-nas","dir":"Reference","previous_headings":"","what":"Handling NAs","title":"omnibus: Fantabulous helper functions — omnibus","text":"%<=na%, %==na%, %!=na%, %>na%, %>=na%: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). isTRUENA isFALSENA: Logical operators robust NA. naCompare: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). naOmitMulti: Remove elements multiple vectors least one element NA rows matrices/data frames least one row NA. naRows: Indices rows least one NA. (!complete.cases(x)).","code":""},{"path":"/reference/omnibus.html","id":"data-properties","dir":"Reference","previous_headings":"","what":"Data properties","title":"omnibus: Fantabulous helper functions — omnibus","text":"countDecDigits: Count number digits decimal. longRun: Longest run given sequence vector. roundedSigDigits: Infers number significant digits represented decimal representation division operation digits place integer rounded. .pmax .pmin: Combine .max pmax, .min pmin (vectorized .max .min).","code":""},{"path":"/reference/omnibus.html","id":"system","dir":"Reference","previous_headings":"","what":"System","title":"omnibus: Fantabulous helper functions — omnibus","text":"dirCreate: Nicer version dir.create. eps: Smallest floating point value computer can think . listFiles: Nicer version list.files. memUse: Display largest objects memory.","code":""},{"path":"/reference/omnibus.html","id":"text","dir":"Reference","previous_headings":"","what":"Text","title":"omnibus: Fantabulous helper functions — omnibus","text":"capIt: Capitalize first letter string. prefix: Add repeating character string ensure user-defined length (e.g., 7 --> 007). say: Replacement print('abc'); flush.console.","code":""},{"path":"/reference/omnibus.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"omnibus: Fantabulous helper functions — omnibus","text":"Adam B. Smith","code":""},{"path":"/reference/pairDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate pairwise distances between two matrices or data frames. — pairDist","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"function takes two data frames matrices returns matrix pairwise Euclidean distances two.","code":""},{"path":"/reference/pairDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"","code":"pairDist(x1, x2 = NULL, na.rm = FALSE)"},{"path":"/reference/pairDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"x1 Data frame matrix one columns wide. x2 Data frame matrix one columns wide. NULL, pairwise distances points x1 calculated. na.rm Logical, TRUE rows x1 x2 least one NA removed first.","code":""},{"path":"/reference/pairDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"Matrix nrow(x1) rows nrow(x2) columns. Values distance row x1 row x2.","code":""},{"path":[]},{"path":"/reference/pairDist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"","code":"x1 <- data.frame(x=sample(1:30, 30), y=sort(round(100 * rnorm(30))), z=sample(1:30, 30)) x2 <- data.frame(x=1:20, y=round(100 * rnorm(20)), z=sample(1:20, 20)) pairDist(x1, x2) #>            [,1]      [,2]      [,3]      [,4]       [,5]      [,6]      [,7] #>  [1,] 141.17719 145.71548 253.80898 285.51883 169.994118  21.74856  44.65423 #>  [2,] 132.61222 138.28955 246.15036 278.07193 162.126494  13.41641  45.70558 #>  [3,]  90.04999  96.33795 202.72395 234.59966 118.987394  55.79426  89.09545 #>  [4,]  76.38063  82.82512 190.06841 222.07206 106.061303  66.06058 100.18483 #>  [5,]  72.94518  79.15175 186.21761 218.16737 102.244804  70.32069 104.35516 #>  [6,]  69.86415  74.06079 182.39792 214.19851  98.661036  75.61085 109.77249 #>  [7,]  45.40925  53.12250 159.12888 191.19100  75.266194  97.02577 131.01527 #>  [8,]  39.03844  39.16631 147.11900 178.63370  64.288413 111.99107 146.16771 #>  [9,]  31.71750  35.91657 138.32570 169.95882  55.668663 120.17487 153.99675 #> [10,]  33.79349  33.49627 138.52798 169.93528  56.098128 120.80563 154.82571 #> [11,]  27.00000  31.92178 123.50304 154.98064  43.611925 136.65650 170.18226 #> [12,]  29.58040  21.47091 121.53600 152.54180  41.785165 139.44533 173.51081 #> [13,]  29.89983  17.83255 103.46980 134.40982  26.702060 156.81199 190.94764 #> [14,]  33.07567  26.94439 104.52751 135.32923  29.983329 157.09233 190.92145 #> [15,]  27.45906  18.60108  93.96808 125.46713  14.456832 163.59095 197.73973 #> [16,]  37.38984  29.12044  95.71834 126.33289  25.475478 165.98795 199.91248 #> [17,]  26.03843  20.14944  91.40022 123.19903   9.433981 165.18475 199.29124 #> [18,]  42.05948  35.62303  90.49309 120.93387  26.038433 172.03779 205.83974 #> [19,]  42.70831  32.95451  85.46344 115.99138  22.022716 175.67584 209.73555 #> [20,]  38.00000  34.55431  76.13147 108.26819  10.246951 180.07221 214.10511 #> [21,]  59.24525  52.19195  56.51548  88.11356  28.653098 200.24984 234.42056 #> [22,]  74.49161  66.27971  44.59821  74.97333  44.317040 214.77663 249.00602 #> [23,]  84.08329  78.29432  38.60052  67.74954  54.083269 223.68281 257.62182 #> [24,]  85.79627  81.50460  42.76681  70.50532  57.078893 224.23871 257.94185 #> [25,]  85.42833  79.18333  29.29164  61.00820  55.090834 227.11671 261.24892 #> [26,]  89.82761  84.59905  30.67572  60.20797  59.799666 230.36710 264.30286 #> [27,] 110.46719 103.38762  24.71841  44.55334  79.937476 250.04200 284.08097 #> [28,] 121.09913 116.09048  16.76305  30.74085  91.148231 262.26132 296.16887 #> [29,] 153.22206 146.84345  43.46263  21.79449 122.743635 293.75330 327.75296 #> [30,] 153.10454 145.58503  42.48529  18.41195 122.547950 293.91665 328.11888 #>             [,8]      [,9]      [,10]     [,11]     [,12]     [,13]     [,14] #>  [1,] 169.345800  19.94994 196.613835 317.99843 137.94564 316.26887  59.30430 #>  [2,] 162.040118  12.12436 189.023808 310.27407 129.48359 309.01618  52.49762 #>  [3,] 119.029408  36.79674 145.399450 266.21983  85.46929 265.16033  16.40122 #>  [4,] 106.381389  46.33573 133.048863 254.11415  73.28028 253.09879  14.00000 #>  [5,] 102.391406  50.09990 129.031004 250.12997  69.26038 249.03413  13.74773 #>  [6,]  98.264948  53.49766 125.654288 246.97571  68.18358 245.37726  17.00000 #>  [7,]  76.124897  77.49194 102.283919 223.05605  42.30839 222.26336  39.11521 #>  [8,]  62.872888  89.44831  90.564894 211.68845  38.28838 209.62109  49.33559 #>  [9,]  55.145263  99.18165  80.894994 201.54900  23.74868 200.21239  58.25805 #> [10,]  54.267854  98.49365  81.289606 202.32153  28.91366 200.31226  57.21888 #> [11,]  43.886217 116.51609  66.700825 185.70137  15.52417 184.80260  76.07233 #> [12,]  38.183766 116.73046  65.122961 185.35102  27.36786 182.81685  75.69016 #> [13,]  21.424285 134.43586  47.434165 167.24234  29.83287 164.69669  93.34881 #> [14,]  26.324893 135.34031  48.207883 166.84724  27.71281 164.79381  94.05318 #> [15,]  10.344080 142.05985  36.796739 157.93036  28.31960 156.08011 101.02475 #> [16,]  20.322401 144.03819  40.024992 158.12021  34.38023 155.80436 102.72293 #> [17,]   9.110434 144.18391  34.029399 155.38983  27.53180 154.01623 103.35376 #> [18,]  22.090722 150.48588  35.735137 152.04276  38.48376 150.02000 109.21996 #> [19,]  15.394804 153.58711  30.692019 148.29700  42.30839 145.71548 112.32987 #> [20,]  16.031220 159.81552  21.863211 140.41367  42.49706 139.74620 119.65785 #> [21,]  28.089144 179.05027   6.480741 121.03718  62.65780 119.24345 138.28955 #> [22,]  42.871902 193.15797  21.047565 108.76121  78.40281 106.04716 152.44999 #> [23,]  53.619026 202.68448  27.313001  98.15294  85.00588  96.56604 161.56113 #> [24,]  57.428216 203.78420  32.202484  98.65597  85.72631  98.06121 162.80970 #> [25,]  55.290144 206.14801  28.705400  94.03191  88.92694  92.43917 165.45090 #> [26,]  60.049979 209.64255  32.664966  90.49309  91.31813  89.47625 168.65646 #> [27,]  78.701969 228.49508  52.697249  74.63913 111.95088  71.20393 187.26719 #> [28,]  91.684241 241.73126  64.023433  58.31809 123.10565  58.18935 200.83077 #> [29,] 122.204746 272.49954  95.273291  33.48134 155.01290  28.70540 231.31580 #> [30,] 121.597697 272.18376  95.713113  38.94868 156.20819  30.78961 231.22932 #>           [,15]      [,16]     [,17]      [,18]     [,19]     [,20] #>  [1,] 123.40989  57.419509 208.79895 267.705062 209.40392 205.38257 #>  [2,] 116.12493  47.455242 201.21133 260.217217 202.20040 198.25489 #>  [3,]  72.73239   5.385165 157.03184 216.009259 158.15815 154.20765 #>  [4,]  60.93439  13.416408 145.27904 204.247399 146.53668 142.67796 #>  [5,]  56.51548  15.394804 141.09217 200.099975 142.26032 138.36184 #>  [6,]  53.83308  28.442925 138.43049 197.149689 139.21925 135.33662 #>  [7,]  32.38827  41.976184 114.50764 173.375315 116.05602 112.29871 #>  [8,]  21.84033  59.715995 103.46980 161.768353 103.77379  99.86491 #>  [9,]  11.09054  63.671030  92.18460 151.105923  93.09672  89.11229 #> [10,]  10.34408  65.833122  93.22017 151.845316  93.43982  89.38121 #> [11,]  19.84943  79.768415  76.81797 135.358783  78.19207  74.31016 #> [12,]  17.83255  85.070559  77.20751 134.988888  76.74634  72.67737 #> [13,]  31.38471 101.872469  59.49790 116.940156  58.83026  54.79964 #> [14,]  31.92178 100.846418  58.12056 116.056021  57.92236  53.74942 #> [15,]  37.10795 107.953694  49.19350 107.680082  49.52777  45.63989 #> [16,]  40.01250 109.945441  49.85980 107.354553  49.16299  44.95553 #> [17,]  39.40812 109.407495  46.56179 105.351792  47.71792  44.03408 #> [18,]  46.49731 115.589792  43.94315 101.212647  43.52011  39.34463 #> [19,]  49.20366 119.958326  40.91455  97.718985  39.61060  35.45420 #> [20,]  56.85948 124.907966  35.01428  91.613318  37.80212  35.28456 #> [21,]  74.54529 144.844744  17.49286  71.589105  17.80449  16.15549 #> [22,]  89.17399 159.790488  21.47091  60.415230  18.97367  20.14944 #> [23,]  97.51410 167.254297  13.56466  47.360321  12.36932  16.09348 #> [24,]  99.14636 167.532086  18.35756  48.641546  19.74842  22.40536 #> [25,] 101.64153 171.656634  21.21320  45.617979  21.23676  24.91987 #> [26,] 104.55620 174.037352  19.20937  40.024992  19.69772  23.79075 #> [27,] 123.39368 193.827243  40.45986  25.416530  37.81534  41.49699 #> [28,] 136.73332 206.012136  51.35173   9.486833  51.45872  55.62374 #> [29,] 167.30212 237.425778  82.68615  25.337719  81.22807  85.14693 #> [30,] 167.61265 238.417701  85.02353  33.075671  82.98193  86.84469 pairDist(x1) #>            [,1]      [,2]      [,3]       [,4]       [,5]      [,6]      [,7] #>  [1,]   0.00000  14.45683  54.75400  65.795137  69.152006  72.18033  96.79359 #>  [2,]  14.45683   0.00000  45.66180  56.356011  60.241182  64.87681  87.62420 #>  [3,]  54.75400  45.66180   0.00000  17.000000  18.000000  30.33150  45.02222 #>  [4,]  65.79514  56.35601  17.00000   0.000000   5.744563  16.40122  31.27299 #>  [5,]  69.15201  60.24118  18.00000   5.744563   0.000000  16.12452  27.91057 #>  [6,]  72.18033  64.87681  30.33150  16.401219  16.124515   0.00000  29.03446 #>  [7,]  96.79359  87.62420  45.02222  31.272992  27.910571  29.03446   0.00000 #>  [8,] 107.38249 100.96534  61.32699  48.020829  44.418465  36.61967  26.49528 #>  [9,] 117.23907 109.69959  65.15366  54.899909  50.049975  50.24938  27.53180 #> [10,] 116.10771 109.66312  66.97014  55.982140  51.312766  47.80167  31.08054 #> [11,] 134.61798 126.62938  81.40025  71.742595  66.977608  68.33740  42.95346 #> [12,] 134.07461 128.14445  86.22065  74.759615  70.327804  65.16134  48.54894 #> [13,] 152.01645 145.76008 103.28117  91.487704  87.149297  82.33468  63.27717 #> [14,] 152.80380 146.19850 102.02451  91.880357  87.068938  85.09407  63.48228 #> [15,] 160.20300 153.08168 109.77705  97.642204  93.439820  89.72736  67.73478 #> [16,] 161.49613 155.03548 111.18003 100.618090  95.921843  93.15042  71.93052 #> [17,] 162.63149 155.01613 111.47645  99.126182  95.052617  91.88580  68.58571 #> [18,] 168.00595 161.27306 116.85889 106.681770 101.921538 100.07997  77.63376 #> [19,] 171.14614 164.73615 121.34661 110.099955 105.607765 101.86756  81.03086 #> [20,] 178.71486 170.47580 127.44018 114.254103 110.620975 107.20541  83.22259 #> [21,] 197.41580 190.05262 146.94557 134.253492 130.326513 126.16259 103.70149 #> [22,] 211.29600 204.36487 161.79617 148.946299 145.058609 140.03571 118.76447 #> [23,] 220.76458 213.43383 169.05325 157.727613 153.398175 150.87412 127.15345 #> [24,] 221.92341 214.24052 169.34580 158.552830 154.149278 152.74161 127.94139 #> [25,] 224.59964 217.08524 173.84188 161.127279 157.254571 153.22206 130.34569 #> [26,] 227.93420 220.32930 176.00568 164.380656 160.181147 157.63883 133.55523 #> [27,] 246.27627 239.48486 195.47378 184.089652 179.738699 176.38027 153.78231 #> [28,] 260.12689 252.38265 208.08171 196.298242 192.192612 189.55210 165.31485 #> [29,] 290.41694 283.39901 239.18612 227.743277 223.459169 220.28618 197.13194 #> [30,] 290.05861 283.39901 240.26236 227.971489 223.915163 219.25784 197.59808 #>            [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14] #>  [1,] 107.38249 117.23907 116.10771 134.61798 134.07461 152.01645 152.80380 #>  [2,] 100.96534 109.69959 109.66312 126.62938 128.14445 145.76008 146.19850 #>  [3,]  61.32699  65.15366  66.97014  81.40025  86.22065 103.28117 102.02451 #>  [4,]  48.02083  54.89991  55.98214  71.74260  74.75961  91.48770  91.88036 #>  [5,]  44.41846  50.04998  51.31277  66.97761  70.32780  87.14930  87.06894 #>  [6,]  36.61967  50.24938  47.80167  68.33740  65.16134  82.33468  85.09407 #>  [7,]  26.49528  27.53180  31.08054  42.95346  48.54894  63.27717  63.48228 #>  [8,]   0.00000  25.01999  16.30951  41.04875  29.30870  46.10857  51.16640 #>  [9,]  25.01999   0.00000  12.64911  18.57418  26.85144  40.42277  37.36308 #> [10,]  16.30951  12.64911   0.00000  27.14774  19.41649  36.46917  37.57659 #> [11,]  41.04875  18.57418  27.14774   0.00000  29.22328  34.19064  25.63201 #> [12,]  29.30870  26.85144  19.41649  29.22328   0.00000  18.13836  24.26932 #> [13,]  46.10857  40.42277  36.46917  34.19064  18.13836   0.00000  15.81139 #> [14,]  51.16640  37.36308  37.57659  25.63201  24.26932  15.81139   0.00000 #> [15,]  54.35071  45.45327  44.56456  34.71311  28.79236  12.96148  17.02939 #> [16,]  58.15497  46.49731  45.71652  34.68429  29.88311  15.42725   9.69536 #> [17,]  57.32364  47.30750  47.81213  35.17101  33.66007  19.28730  20.92845 #> [18,]  65.76473  51.97115  52.73519  37.81534  38.13135  23.89561  15.26434 #> [19,]  66.00000  56.76266  55.11806  45.17743  37.66962  20.14944  21.11871 #> [20,]  73.48469  64.79197  65.83312  52.00961  51.95190  36.74235  39.37004 #> [21,]  90.67524  82.71638  82.18272  69.53416  65.30697  47.43416  50.17968 #> [22,] 104.06248  97.74968  96.18212  85.19390  78.31986  60.34070  64.27286 #> [23,] 115.68059 104.00961 104.92855  88.36855  88.57200  70.79548  68.77500 #> [24,] 118.41030 104.71390 106.86908  88.04544  91.68424  74.49161  70.34913 #> [25,] 117.83887 109.50799 109.36178  95.35722  92.37424  74.36397  76.13147 #> [26,] 122.62545 111.15305 112.29871  95.38344  96.09370  78.26238  76.64855 #> [27,] 140.46708 130.32651 130.17296 115.29961 112.72977  94.76814  94.09038 #> [28,] 154.50890 143.37015 144.53719 127.39702 128.10152 110.13174 108.89904 #> [29,] 184.48035 174.07182 174.32441 158.46766 156.97771 138.97122 138.09055 #> [30,] 183.05464 175.41095 174.33588 161.13349 156.16017 138.13399 139.66030 #>           [,15]      [,16]     [,17]      [,18]     [,19]     [,20]     [,21] #>  [1,] 160.20300 161.496130 162.63149 168.005952 171.14614 178.71486 197.41580 #>  [2,] 153.08168 155.035480 155.01613 161.273060 164.73615 170.47580 190.05262 #>  [3,] 109.77705 111.180034 111.47645 116.858889 121.34661 127.44018 146.94557 #>  [4,]  97.64220 100.618090  99.12618 106.681770 110.09995 114.25410 134.25349 #>  [5,]  93.43982  95.921843  95.05262 101.921538 105.60776 110.62097 130.32651 #>  [6,]  89.72736  93.150416  91.88580 100.079968 101.86756 107.20541 126.16259 #>  [7,]  67.73478  71.930522  68.58571  77.633756  81.03086  83.22259 103.70149 #>  [8,]  54.35071  58.154965  57.32364  65.764732  66.00000  73.48469  90.67524 #>  [9,]  45.45327  46.497312  47.30750  51.971146  56.76266  64.79197  82.71638 #> [10,]  44.56456  45.716518  47.81213  52.735187  55.11806  65.83312  82.18272 #> [11,]  34.71311  34.684290  35.17101  37.815341  45.17743  52.00961  69.53416 #> [12,]  28.79236  29.883106  33.66007  38.131352  37.66962  51.95190  65.30697 #> [13,]  12.96148  15.427249  19.28730  23.895606  20.14944  36.74235  47.43416 #> [14,]  17.02939   9.695360  20.92845  15.264338  21.11871  39.37004  50.17968 #> [15,]   0.00000  13.638182   6.63325  18.411953  15.29706  24.53569  37.70942 #> [16,]  13.63818   0.000000  18.05547   8.774964  11.57584  34.20526  41.61730 #> [17,]   6.63325  18.055470   0.00000  20.273135  18.70829  19.33908  35.58089 #> [18,]  18.41195   8.774964  20.27313   0.000000  12.68858  32.93934  38.43176 #> [19,]  15.29706  11.575837  18.70829  12.688578   0.00000  28.91366  31.33688 #> [20,]  24.53569  34.205263  19.33908  32.939338  28.91366   0.00000  23.36664 #> [21,]  37.70942  41.617304  35.58089  38.431758  31.33688  23.36664   0.00000 #> [22,]  52.31635  55.072679  51.07837  52.096065  43.87482  39.00000  16.40122 #> [23,]  61.35145  60.282667  59.26213  53.916602  51.28353  48.55924  29.22328 #> [24,]  64.38167  62.697687  61.71710  55.371473  55.14526  51.46844  35.81899 #> [25,]  64.82284  67.334983  62.40192  62.777384  56.93856  47.77028  27.23968 #> [26,]  68.33008  68.271517  65.76473  61.983869  59.16925  53.15073  34.19064 #> [27,]  86.72370  85.047046  85.37564  79.284299  75.22633  74.26305  52.35456 #> [28,] 100.36434 100.424101  97.69852  94.116949  91.04395  83.60024  64.50581 #> [29,] 130.58714 129.193653 128.79829 123.117830 119.48640 115.95258  94.92629 #> [30,] 130.52586 130.303492 129.13946 125.355494 119.67038 115.79724  93.95212 #>           [,22]     [,23]     [,24]     [,25]     [,26]     [,27]     [,28] #>  [1,] 211.29600 220.76458 221.92341 224.59964 227.93420 246.27627 260.12689 #>  [2,] 204.36487 213.43383 214.24052 217.08524 220.32930 239.48486 252.38265 #>  [3,] 161.79617 169.05325 169.34580 173.84188 176.00568 195.47378 208.08171 #>  [4,] 148.94630 157.72761 158.55283 161.12728 164.38066 184.08965 196.29824 #>  [5,] 145.05861 153.39817 154.14928 157.25457 160.18115 179.73870 192.19261 #>  [6,] 140.03571 150.87412 152.74161 153.22206 157.63883 176.38027 189.55210 #>  [7,] 118.76447 127.15345 127.94139 130.34569 133.55523 153.78231 165.31485 #>  [8,] 104.06248 115.68059 118.41030 117.83887 122.62545 140.46708 154.50890 #>  [9,]  97.74968 104.00961 104.71390 109.50799 111.15305 130.32651 143.37015 #> [10,]  96.18212 104.92855 106.86908 109.36178 112.29871 130.17296 144.53719 #> [11,]  85.19390  88.36855  88.04544  95.35722  95.38344 115.29961 127.39702 #> [12,]  78.31986  88.57200  91.68424  92.37424  96.09370 112.72977 128.10152 #> [13,]  60.34070  70.79548  74.49161  74.36397  78.26238  94.76814 110.13174 #> [14,]  64.27286  68.77500  70.34913  76.13147  76.64855  94.09038 108.89904 #> [15,]  52.31635  61.35145  64.38167  64.82284  68.33008  86.72370 100.36434 #> [16,]  55.07268  60.28267  62.69769  67.33498  68.27152  85.04705 100.42410 #> [17,]  51.07837  59.26213  61.71710  62.40192  65.76473  85.37564  97.69852 #> [18,]  52.09607  53.91660  55.37147  62.77738  61.98387  79.28430  94.11695 #> [19,]  43.87482  51.28353  55.14526  56.93856  59.16925  75.22633  91.04395 #> [20,]  39.00000  48.55924  51.46844  47.77028  53.15073  74.26305  83.60024 #> [21,]  16.40122  29.22328  35.81899  27.23968  34.19064  52.35456  64.50581 #> [22,]   0.00000  26.01922  35.86084  17.05872  28.91366  41.01219  54.62600 #> [23,]  26.01922   0.00000  10.81665  19.64688   9.00000  27.87472  40.26164 #> [24,]  35.86084  10.81665   0.00000  28.01785  13.19091  32.58834  40.81666 #> [25,]  17.05872  19.64688  28.01785   0.00000  16.82260  30.54505  38.92300 #> [26,]  28.91366   9.00000  13.19091  16.82260   0.00000  24.12468  32.31099 #> [27,]  41.01219  27.87472  32.58834  30.54505  24.12468   0.00000  23.28089 #> [28,]  54.62600  40.26164  40.81666  38.92300  32.31099  23.28089   0.00000 #> [29,]  82.49848  70.20684  71.49825  69.28925  63.92183  44.29447  34.55431 #> [30,]  79.38514  73.87151  78.00000  68.09552  67.80855  47.34976  41.88078 #>           [,29]     [,30] #>  [1,] 290.41694 290.05861 #>  [2,] 283.39901 283.39901 #>  [3,] 239.18612 240.26236 #>  [4,] 227.74328 227.97149 #>  [5,] 223.45917 223.91516 #>  [6,] 220.28618 219.25784 #>  [7,] 197.13194 197.59808 #>  [8,] 184.48035 183.05464 #>  [9,] 174.07182 175.41095 #> [10,] 174.32441 174.33588 #> [11,] 158.46766 161.13349 #> [12,] 156.97771 156.16017 #> [13,] 138.97122 138.13399 #> [14,] 138.09055 139.66030 #> [15,] 130.58714 130.52586 #> [16,] 129.19365 130.30349 #> [17,] 128.79829 129.13946 #> [18,] 123.11783 125.35549 #> [19,] 119.48640 119.67038 #> [20,] 115.95258 115.79724 #> [21,]  94.92629  93.95212 #> [22,]  82.49848  79.38514 #> [23,]  70.20684  73.87151 #> [24,]  71.49825  78.00000 #> [25,]  69.28925  68.09552 #> [26,]  63.92183  67.80855 #> [27,]  44.29447  47.34976 #> [28,]  34.55431  41.88078 #> [29,]   0.00000  21.26029 #> [30,]  21.26029   0.00000"},{"path":"/reference/prefix.html","id":null,"dir":"Reference","previous_headings":"","what":"Add leading characters to a string — prefix","title":"Add leading characters to a string — prefix","text":"Add leading characters string. function useful ensuring, say, files get sorted particular order. example, operating systems file name \"file 1\" come first, \"file 10\", \"file 11\", \"file 12\", etc., \"file 2\", \"file 21\", . Using prefix, can add one leading zeros file names \"file 01\", \"file 02\", \"file 03\", ... sort way.","code":""},{"path":"/reference/prefix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add leading characters to a string — prefix","text":"","code":"prefix(x, len, pad = \"0\")"},{"path":"/reference/prefix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add leading characters to a string — prefix","text":"x Character character list add prefix. len total number characters desired string. string already length longer nothing prefixed string. pad Character. Symbol prefix string.","code":""},{"path":"/reference/prefix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add leading characters to a string — prefix","text":"Character character vector.","code":""},{"path":"/reference/prefix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add leading characters to a string — prefix","text":"","code":"prefix(1:5, len=2) #> [1] \"01\" \"02\" \"03\" \"04\" \"05\" prefix(1:5, len=5) #> [1] \"00001\" \"00002\" \"00003\" \"00004\" \"00005\" prefix(1:5, len=3, pad='!') #> [1] \"!!1\" \"!!2\" \"!!3\" \"!!4\" \"!!5\""},{"path":"/reference/quadArea.html","id":null,"dir":"Reference","previous_headings":"","what":"Area of a quadrilateral — quadArea","title":"Area of a quadrilateral — quadArea","text":"Calculates area quadrilateral dividing two triangles applying Heron's formula.","code":""},{"path":"/reference/quadArea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Area of a quadrilateral — quadArea","text":"","code":"quadArea(x, y)"},{"path":"/reference/quadArea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Area of a quadrilateral — quadArea","text":"x Numeric list. x coordinates quadrilateral. y Numeric list. y coordinates quadrilateral.","code":""},{"path":"/reference/quadArea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Area of a quadrilateral — quadArea","text":"Numeric (area quadrilateral units x y.","code":""},{"path":"/reference/quadArea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Area of a quadrilateral — quadArea","text":"","code":"x <- c(0, 6, 4, 1) y <- c(0, 1, 7, 4) quadArea(x, y) #> [1] 21.24036 plot(1, type='n', xlim=c(0, 7), ylim=c(0, 7), xlab='x', ylab='y') polygon(x, y) text(x, y, LETTERS[1:4], pos=4) lines(x[c(1, 3)], y[c(1, 3)], lty='dashed', col='red')"},{"path":"/reference/renumSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Renumber a sequence of numbers — renumSeq","title":"Renumber a sequence of numbers — renumSeq","text":"function renumbers sequence, helpful \"gaps\" appear sequence. example, consider sequence {1, 1, 3, 1, 8, 8, 8}. function renumber sequence {1, 1, 2, 1, 3, 3, 3}. NAs ignored.","code":""},{"path":"/reference/renumSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Renumber a sequence of numbers — renumSeq","text":"","code":"renumSeq(x)"},{"path":"/reference/renumSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Renumber a sequence of numbers — renumSeq","text":"x Vector numerical character values.","code":""},{"path":"/reference/renumSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Renumber a sequence of numbers — renumSeq","text":"vector.","code":""},{"path":[]},{"path":"/reference/renumSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Renumber a sequence of numbers — renumSeq","text":"","code":"x <- c(1, 1, 3, 1, 8, 8, 8) renumSeq(x) #> [1] 1 1 2 1 3 3 3  x <- c(1, 1, 3, 1, 8, NA, 8, 8) renumSeq(x) #> [1]  1  1  2  1  3 NA  3  3  y <- c('c', 'c', 'b', 'a', 'w', 'a') renumSeq(y) #> [1] 3 3 2 1 4 1"},{"path":"/reference/rotateMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate values in a matrix — rotateMatrix","title":"Rotate values in a matrix — rotateMatrix","text":"function rotates values matrix user-specified number degrees. almost cases values fall outside matrix discarded.  Cells rotated values become NA. square matrices can accommodated. cases rotation cause cells assigned value original values fall within . instances mean value surrounding cells assigned cells missing values. angle rotation small rotation occur.","code":""},{"path":"/reference/rotateMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate values in a matrix — rotateMatrix","text":"","code":"rotateMatrix(x, rot)"},{"path":"/reference/rotateMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate values in a matrix — rotateMatrix","text":"x Object class matrix. rot Numeric. Number degrees rotate matrix. Values represent difference degrees \"north\" () clockwise direction.","code":""},{"path":"/reference/rotateMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate values in a matrix — rotateMatrix","text":"matrix.","code":""},{"path":[]},{"path":"/reference/rotateMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotate values in a matrix — rotateMatrix","text":"","code":"x <- matrix(1:100, nrow=10) x #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1   11   21   31   41   51   61   71   81    91 #>  [2,]    2   12   22   32   42   52   62   72   82    92 #>  [3,]    3   13   23   33   43   53   63   73   83    93 #>  [4,]    4   14   24   34   44   54   64   74   84    94 #>  [5,]    5   15   25   35   45   55   65   75   85    95 #>  [6,]    6   16   26   36   46   56   66   76   86    96 #>  [7,]    7   17   27   37   47   57   67   77   87    97 #>  [8,]    8   18   28   38   48   58   68   78   88    98 #>  [9,]    9   19   29   39   49   59   69   79   89    99 #> [10,]   10   20   30   40   50   60   70   80   90   100 rotateMatrix(x, 90) # 90 degrees to the right #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   10    9    8    7    6    5    4    3    2     1 #>  [2,]   20   19   18   17   16   15   14   13   12    11 #>  [3,]   30   29   28   27   26   25   24   23   22    21 #>  [4,]   40   39   38   37   36   35   34   33   32    31 #>  [5,]   50   49   48   47   46   45   44   43   42    41 #>  [6,]   60   59   58   57   56   55   54   53   52    51 #>  [7,]   70   69   68   67   66   65   64   63   62    61 #>  [8,]   80   79   78   77   76   75   74   73   72    71 #>  [9,]   90   89   88   87   86   85   84   83   82    81 #> [10,]  100   99   98   97   96   95   94   93   92    91 rotateMatrix(x, 180) # 180 degrees to the right #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]  100   90   80   70   60   50   40   30   20    10 #>  [2,]   99   89   79   69   59   49   39   29   19     9 #>  [3,]   98   88   78   68   58   48   38   28   18     8 #>  [4,]   97   87   77   67   57   47   37   27   17     7 #>  [5,]   96   86   76   66   56   46   36   26   16     6 #>  [6,]   95   85   75   65   55   45   35   25   15     5 #>  [7,]   94   84   74   64   54   44   34   24   14     4 #>  [8,]   93   83   73   63   53   43   33   23   13     3 #>  [9,]   92   82   72   62   52   42   32   22   12     2 #> [10,]   91   81   71   61   51   41   31   21   11     1 rotateMatrix(x, 45) # 45 degrees to the right #>       [,1] [,2] [,3]   [,4]     [,5]   [,6]   [,7] [,8]   [,9] [,10] #>  [1,]   NA   NA    4  3.000 13.00000 22.000 21.000   31     NA    NA #>  [2,]   NA  7.6    5 14.000 19.75000 23.000 32.000   41 47.200    NA #>  [3,]    7  6.0   16 25.000 24.00000 34.000 43.000   52 51.000    61 #>  [4,]    8 17.0   26 27.000 35.00000 44.000 48.500   53 62.000    71 #>  [5,]   19 24.0   27 36.000 44.14286 45.000 54.000   63 68.875    72 #>  [6,]   29 28.0   38 47.000 46.00000 56.000 65.000   74 73.000    83 #>  [7,]   30 39.0   48 52.625 57.00000 66.000 71.875   75 84.000    93 #>  [8,]   40 50.0   59 58.000 68.00000 77.000 76.000   86 95.000    94 #>  [9,]   NA 55.8   60 69.000 78.00000 82.625 87.000   96 93.600    NA #> [10,]   NA   NA   70 80.000 89.00000 88.000 98.000   97     NA    NA rotateMatrix(x, 7) # slight rotation #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    2   NA   11   21   31   41   51   61   71    81 #>  [2,]    3   12   22   32   42   52   62   72   82    NA #>  [3,]    4   13   23   33   43   53   63   73   83    92 #>  [4,]    5   14   24   34   44   54   64   74   84    93 #>  [5,]    6   15   25   35   45   55   65   75   85    94 #>  [6,]    7   16   26   36   46   56   66   76   86    95 #>  [7,]    8   17   27   37   47   57   67   77   87    96 #>  [8,]    9   18   28   38   48   58   68   78   88    97 #>  [9,]   NA   19   29   39   49   59   69   79   89    98 #> [10,]   20   30   40   50   60   70   80   90   NA    99 rotateMatrix(x, 5) # no rotation because angle is too small #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1   11   21   31   41   51   61   71   81    91 #>  [2,]    2   12   22   32   42   52   62   72   82    92 #>  [3,]    3   13   23   33   43   53   63   73   83    93 #>  [4,]    4   14   24   34   44   54   64   74   84    94 #>  [5,]    5   15   25   35   45   55   65   75   85    95 #>  [6,]    6   16   26   36   46   56   66   76   86    96 #>  [7,]    7   17   27   37   47   57   67   77   87    97 #>  [8,]    8   18   28   38   48   58   68   78   88    98 #>  [9,]    9   19   29   39   49   59   69   79   89    99 #> [10,]   10   20   30   40   50   60   70   80   90   100"},{"path":"/reference/roundTo.html","id":null,"dir":"Reference","previous_headings":"","what":"Round to nearest target value — roundTo","title":"Round to nearest target value — roundTo","text":"function rounds value nearest \"target\" value (e.g., round 0.72 nearest 0.25, 0.75).","code":""},{"path":"/reference/roundTo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round to nearest target value — roundTo","text":"","code":"roundTo(x, target, roundFx = round)"},{"path":"/reference/roundTo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round to nearest target value — roundTo","text":"x Numeric. target Numeric. roundFx round, floor, ceiling.","code":""},{"path":"/reference/roundTo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round to nearest target value — roundTo","text":"Numeric.","code":""},{"path":"/reference/roundTo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round to nearest target value — roundTo","text":"","code":"roundTo(0.73, 0.05) #> [1] 0.75 roundTo(0.73, 0.1) #> [1] 0.7 roundTo(0.73, 0.25) #> [1] 0.75 roundTo(0.73, 0.25, floor) #> [1] 0.5 roundTo(0.73, 1) #> [1] 1 roundTo(0.73, 10) #> [1] 0 roundTo(0.73, 10, ceiling) #> [1] 10"},{"path":"/reference/roundedSigDigits.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of significant digits in rounded numbers — roundedSigDigits","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"function \"examines\" numeric value (typically numbers decimal place) estimates either: number significant digits numerator denominator fraction (approximately) result given value. number digits integer may rounded, depending whether input values decimal place integer. Negative values treated positive values negative number returns value positive version. See Details details. Obviously, values can appear rounded repeating even !","code":""},{"path":"/reference/roundedSigDigits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"","code":"roundedSigDigits(x, minReps = 3)"},{"path":"/reference/roundedSigDigits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"x Numeric numeric vector. minReps Integer. Number times digit sequence digits occur decimal place needs repeated assume represents repeating series thus assumed arise using decimal places represent fraction. Default 3. example, minReps 3 0.111 assumed represent repeating value 1 occurs three times, -1 returned. However, minReps 4 function assume value four digits, next digit 1, returns -3 three values decimal place. penultimate digit >5 last digit equal penultimate digit plus 1, last digit counts repeat penultimate digit.  0.067 assumed two repeating 6s.  minReps 0 1 function (usually) return negative total number decimal places value.","code":""},{"path":"/reference/roundedSigDigits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"Integer (number digits) NA (appear rounded).","code":""},{"path":"/reference/roundedSigDigits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"values least one non-zero digit decimal place repeated series digits detected, function simply returns total number digits (ignoring trailing zeros) times -1. example: 0.3 returns -1 just one value decimal. 0.34567 returns -5 repeats 5th decimal place. 0.1212125 returns -7 repeats (starting right) 7th decimal place. 0.111117 returns -6 repeats (starting right) 7th decimal place. function takes account rounding : 0.666 might truncated version 2/3. Two three 1 significant digit, function returns -1 (1 value decimal place). 0.667 also returns -1 might represent rounding 2/3 customary round digits next digit >5. 0.3334 returns -4 inappropriate round 3 4 next digit 5 less. Repeating series accounted . example: 0.121212 returns -2 \"12\" starts repeating second decimal place. 0.000678678678 returns -6 \"678\" starts repeating 6th place. 0.678678678 returns -3. 0.678678679 also returns -3 678 rounded 679 next digit 6. Note can set minimum number times digit series needs repeated count repeated using argument minReps. default 3, digits series digits need repeated least 3 times count repetition, can changed: 0.1111 returns -1 using default requirement 3 repetitions -4 number minimum repetitions 5 . 0.121212 returns -2 using default requirement 3 repetitions -6 number minimum repetitions 4 . Trailing zeros ignored, 0.12300 returns -3. values digits decimal place location first non-zero digit right returned positive integer. example: 234 returns 1 first non-zero digit right 1s place. 100 return 3 first non-zero digit right 100s place. 70001 returns 1 first non-zero digit right 1s place. However, note oddities: 4E5 returns 6 4E50 probably return 51 many computers hard time internally representing numbers large. 4E-5 returns -5  probably return -50 many computers hard time internally representing numbers small. -100 100 return 3 -0.12 0.12 return -2 negative sign ignored. 0 returns 0. NA NaN returns NA.","code":""},{"path":"/reference/roundedSigDigits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"","code":"roundedSigDigits(0.3) #> [1] -1 roundedSigDigits(0.34567) #> [1] -5 roundedSigDigits(0.1212125) #> [1] -7 roundedSigDigits(0.111117) #> [1] -6 roundedSigDigits(0.666) #> [1] -1 roundedSigDigits(0.667) #> [1] -1 roundedSigDigits(0.3334) #> [1] -4 roundedSigDigits(0.121212) #> [1] -2 roundedSigDigits(0.000678678678) #> [1] -6 roundedSigDigits(0.678678678) #> [1] -3 roundedSigDigits(0.678678679) #> [1] -3 roundedSigDigits(0.1111) #> [1] -1 roundedSigDigits(0.1111, minReps=5) #> [1] -4 roundedSigDigits(0.121212) #> [1] -2 roundedSigDigits(0.121212, minReps=4) #> [1] -6 roundedSigDigits(234) #> [1] 1 roundedSigDigits(100) #> [1] 3 roundedSigDigits(70001) #> [1] 1 roundedSigDigits(4E5) #> [1] 1 roundedSigDigits(4E50) #> [1] 2 roundedSigDigits(4E-5) #> [1] 1 roundedSigDigits(4E-50) #> [1] 2 roundedSigDigits(0) #> [1] 0 roundedSigDigits(NA) #> [1] NA  x <- c(0.0667, 0.0667, 0.067) roundedSigDigits(x) #> [1] -2 -2 -3"},{"path":"/reference/rowColIndexing.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between row- and column-style indexing of matrices — rowColIndexing","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"functions converts index values cells row- column-style indexing cells matrices. Column indexing (default matrices) cell \"1\" upper left corner matrix. cell \"2\" , . numbering wraps around top next column. Row indexing (default rasters, example), also cell \"1\" upper left, cell \"2\" right, . Numbering wraps around next row.","code":""},{"path":"/reference/rowColIndexing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"","code":"rowColIndexing(x, cell, dir)"},{"path":"/reference/rowColIndexing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"x Either matrix, vector two values, one number rows one number columns matrix. cell One cell indices (positive integers). dir \"direction\" convert. 'row', assumed cell column-style index converted row-style index. 'col', assumed cell row-style index converted column-style index.","code":""},{"path":"/reference/rowColIndexing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"One positive integers.","code":""},{"path":"/reference/rowColIndexing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"","code":"# column versus row indexing colIndex <- matrix(1:40, nrow=5, ncol=8) rowIndex <- matrix(1:40, nrow=5, ncol=8, byrow=TRUE) colIndex #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    6   11   16   21   26   31   36 #> [2,]    2    7   12   17   22   27   32   37 #> [3,]    3    8   13   18   23   28   33   38 #> [4,]    4    9   14   19   24   29   34   39 #> [5,]    5   10   15   20   25   30   35   40 rowIndex #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    2    3    4    5    6    7    8 #> [2,]    9   10   11   12   13   14   15   16 #> [3,]   17   18   19   20   21   22   23   24 #> [4,]   25   26   27   28   29   30   31   32 #> [5,]   33   34   35   36   37   38   39   40  # examples x <- matrix('a', nrow=5, ncol=8, byrow=TRUE) rowColIndexing(x, cell=c(1, 6, 20), 'row') #> [1]  1  2 36 rowColIndexing(x, cell=c(1, 6, 20), 'col') #> [1]  1 26 18  rowColIndexing(c(5, 8), cell=c(1, 6, 20), 'row') #> [1]  1  2 36 rowColIndexing(c(5, 8), cell=c(1, 6, 20), 'col') #> [1]  1 26 18"},{"path":"/reference/say.html","id":null,"dir":"Reference","previous_headings":"","what":"Nicer version of print() or cat() function — say","title":"Nicer version of print() or cat() function — say","text":"function nicer version print() cat(), especially used inline functions displays immediately pastes strings together. also rudimentary optional word wrapping.","code":""},{"path":"/reference/say.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nicer version of print() or cat() function — say","text":"","code":"say(   ...,   pre = 0,   post = 1,   breaks = NULL,   wiggle = 10,   preBreak = 1,   level = NULL,   deco = \"#\" )"},{"path":"/reference/say.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nicer version of print() or cat() function — say","text":"... character strings print pre Integer >= 0.  Number blank lines print strings post Integer >= 0. Number blank lines print strings breaks Either NULL, causes strings printed line (wrap overflow) positive integer wraps lines character length (e.g., breaks=80 inserts line breaks every 80 characters). wiggle Integer >- 0.  Allows line overrun breaks length characters inserting line breaks. preBreak wrapping long lines indicates subsequent lines indented. NULL causes lines printed starting column 1 display device. positive integer inserts preBreak number spaces printing line. string causes line start string. level Integer NULL. NULL, items ... displayed -. Otherwise, value 1, 2, 3 indicates teh heading level, lower numbers causing decoration spacing used. deco Character. Character decorate text level NULL.","code":""},{"path":"/reference/say.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nicer version of print() or cat() function — say","text":"Nothing (side effect output display device).","code":""},{"path":"/reference/say.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nicer version of print() or cat() function — say","text":"","code":"say('The quick brown fox ', 'jumps over the lazy ', 'Susan.') #>  The quick brown fox jumps over the lazy Susan. say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', breaks=10) #>  The quick  #>  brown fox  #>  jumps over #>   the lazy Susan. say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', level=1) #>  #>  ######################################################  #>  ### The quick brown fox jumps over the lazy Susan. ### #>  ######################################################  #>  say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', level=2) #>  #>     ### The quick brown fox jumps over the lazy Susan. ### #>     ######################################################  #>  say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', level=3) #>  #>        ### The quick brown fox jumps over the lazy Susan.  #>"},{"path":"/reference/stretchMinMax.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale values — stretchMinMax","title":"Rescale values — stretchMinMax","text":"function rescales vector numeric values arbitrary range. Optionally, stretch values equal lowest value can \"nudged\" slightly higher half minimum value across rescaled vector values > 0.","code":""},{"path":"/reference/stretchMinMax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale values — stretchMinMax","text":"","code":"stretchMinMax(   x,   lower = 0,   upper = 1,   nudgeUp = FALSE,   nudgeDown = FALSE,   na.rm = FALSE )"},{"path":"/reference/stretchMinMax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale values — stretchMinMax","text":"x Numeric list. lower Numeric, low end range stretch. upper Numeric, high end range stretch. nudgeUp, nudgeDown Logical, FALSE (default) nothing. TRUE ** rescaling [0, 1], small value added values x equal 0. value equal 0.5 * min(x[x > 0]). na.rm Logical, FALSE (default) values x NA returned value NA. TRUE NA's ignored calculation.","code":""},{"path":"/reference/stretchMinMax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale values — stretchMinMax","text":"Numeric value.","code":""},{"path":[]},{"path":"/reference/stretchMinMax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescale values — stretchMinMax","text":"","code":"x <- 1:10 stretchMinMax(x) #>  [1] 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667 #>  [8] 0.7777778 0.8888889 1.0000000 stretchMinMax(x, lower=2, upper=5) #>  [1] 2.000000 2.333333 2.666667 3.000000 3.333333 3.666667 4.000000 4.333333 #>  [9] 4.666667 5.000000 stretchMinMax(x, nudgeUp=TRUE) #>  [1] 0.05555556 0.11111111 0.22222222 0.33333333 0.44444444 0.55555556 #>  [7] 0.66666667 0.77777778 0.88888889 1.00000000 stretchMinMax(x, lower=2, upper=5, nudgeUp=TRUE) #>  [1] 2.166667 2.333333 2.666667 3.000000 3.333333 3.666667 4.000000 4.333333 #>  [9] 4.666667 5.000000 stretchMinMax(x, nudgeDown=TRUE) #>  [1] 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667 #>  [8] 0.7777778 0.8888889 0.9444444 stretchMinMax(x, lower=2, upper=5, nudgeUp=TRUE, nudgeDown=TRUE) #>  [1] 2.166667 2.333333 2.666667 3.000000 3.333333 3.666667 4.000000 4.333333 #>  [9] 4.666667 4.833333 x <- c(1:5, NA) stretchMinMax(x) #> [1] NA NA NA NA NA NA stretchMinMax(x, na.rm=TRUE) #> [1] 0.00 0.25 0.50 0.75 1.00   NA"},{"path":"/reference/which.pmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Which vector has maximum value at each element — which.pmax","title":"Which vector has maximum value at each element — which.pmax","text":"functions vectorized versions .max .min, return index value maximum minimum (first maximum/minimum value, tie). case, function supplied two vectors length. element position (e.g., first element vector, second element, etc.) function returns integer indicating vector highest lowest value (index first vector highest lowest value case ties).","code":""},{"path":"/reference/which.pmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Which vector has maximum value at each element — which.pmax","text":"","code":"which.pmax(..., na.rm = TRUE)  which.pmin(..., na.rm = TRUE)"},{"path":"/reference/which.pmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Which vector has maximum value at each element — which.pmax","text":"... Two vectors. lengths match, results likely unanticipated. na.rm Logical, FALSE vectors contains NA NaN, function return NA. TRUE (default), NA returned elements position NA NaN.","code":""},{"path":"/reference/which.pmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Which vector has maximum value at each element — which.pmax","text":"Vector length input, numeric values indicating vector highest value position. case ties, index first vector returned.","code":""},{"path":"/reference/which.pmax.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Which vector has maximum value at each element — which.pmax","text":".pmin(): vector minimum value element","code":""},{"path":[]},{"path":"/reference/which.pmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Which vector has maximum value at each element — which.pmax","text":"","code":"set.seed(123) a <- sample(9, 5) b <- sample(9, 5) c <- sample(9, 5) a[2:3] <- NA b[3] <- NA a[6] <- NA b[6] <- NA c[6] <- NA which.pmax(a, b, c) #> [1]  2  2  3  2  1 NA which.pmin(a, b, c) #> [1]  1  2  3  3  2 NA which.pmax(a, b, c, na.rm=FALSE) #> [1]  2 NA NA  2  1 NA which.pmin(a, b, c, na.rm=FALSE) #> [1]  1 NA NA  3  2 NA"},{"path":"/reference/yearFromDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Year from date formats that are possibly ambiguous — yearFromDate","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"function attempts return year characters representing dates formats. formats can ambigous varied within set.  example, returns \"1982\" (9982 century ambigous) \"11/20/82\", \"1982-11-20\", \"Nov. 20, 1982\", \"20 Nov 1982\", \"20-Nov-1982\", \"20/Nov/1982\", \"20 Nov. 82\", \"20 Nov 82\". function handles ambiguous centuries (e.g., 1813, 1913, 2013) including dummy place holder century place (.e., 9913). Note may return warnings like \"NAs introduced coercion\".","code":""},{"path":"/reference/yearFromDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"","code":"yearFromDate(x, yearLast = TRUE)"},{"path":"/reference/yearFromDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"x Character character list, one dates. yearLast Logical, TRUE assume dates like \"XX/YY/ZZ\" list year last (=ZZ).  FALSE, assume first (=XX).","code":""},{"path":"/reference/yearFromDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"Numeric.","code":""},{"path":"/reference/yearFromDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"","code":"yearFromDate(1969, yearLast=TRUE) #> [1] 1969 yearFromDate('10-Jul-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10-Jul-1971', yearLast=TRUE) # --> 1971 #> [1] 1971 yearFromDate('10-19-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10-19-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10-1-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3-22-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3-2-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10-1-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3-22-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3-2-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10/Jul/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10/Jul/1971', yearLast=TRUE) # --> 1971 #> [1] 1971 yearFromDate('10/19/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10/19/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10/1/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3/22/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3/2/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10/1/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3/22/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3/2/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10 mmm 71', yearLast=TRUE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('5 mmm 71', yearLast=TRUE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('10 19 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10 19 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10 1 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3 22 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3 2 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10 1 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3 22 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3 2 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('Oct. 19, 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('19 October 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('How you do dat?', yearLast=TRUE) # --> NA #> [1] NA yearFromDate('2014-07-03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014-07-3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 3', yearLast=TRUE) # --> 2014 #> [1] 2014  yearFromDate(1969, yearLast=FALSE) #> [1] 1969 yearFromDate('10-Jul-71', yearLast=FALSE) # --> 9971 #> [1] 9910 yearFromDate('10-Jul-1971', yearLast=FALSE) # --> 1971 #> [1] 1971 yearFromDate('10-19-71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('10-19-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10-1-71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('3-22-71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('3-2-71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('10-1-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3-22-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3-2-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10/19/71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('10/19/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10/1/71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('3/22/71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('3/2/71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('10/1/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3/22/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3/2/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10 mmm 71', yearLast=FALSE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('5 mmm 71', yearLast=FALSE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('10 19 71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('10 19 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10 1 71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('3 22 71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('3 2 71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('10 1 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3 22 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3 2 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('Oct. 19, 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('19 October 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('How you do dat?', yearLast=FALSE) # --> NA #> [1] NA yearFromDate('2014-07-03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014-07-3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 3', yearLast=FALSE) # --> 2014 #> [1] 2014"},{"path":"/news/index.html","id":"omnibus-113","dir":"Changelog","previous_headings":"","what":"omnibus 1.1.3","title":"omnibus 1.1.3","text":"o Added insert() o Added renumSeq() o Fixed bug insertCol()","code":""},{"path":"/news/index.html","id":"omnibus-112","dir":"Changelog","previous_headings":"","what":"omnibus 1.1.2","title":"omnibus 1.1.2","text":"CRAN release: 2022-02-15 o Removed clear()","code":""},{"path":"/news/index.html","id":"omnibus-111","dir":"Changelog","previous_headings":"","what":"omnibus 1.1.1","title":"omnibus 1.1.1","text":"o Removed () o Cleaned help o First sumbission CRAN","code":""}]
